name: Infrastructure Validation 1

on:
  push:
    branches:
      - '**'  # Run on all branches
  pull_request:
    branches:
      - master
      - develop
    paths:
    - 'AppInfraCdkV1.Core/**'
    - 'AppInfraCdkV1.Stacks/**'
    - 'AppInfraCdkV1.Apps/**'
    - 'AppInfraCdkV1.Deploy/**'
    - 'AppInfraCdkV1.Tests/**'
    - '.github/workflows/**'
    - '*.sln'
    - '*.csproj'

jobs:
  validate-naming-conventions:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [TrialFinderV2]
        environment: [Development, Production]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Restore dependencies
      run: dotnet restore AppInfraCdkV1.sln
    
    - name: Build
      run: dotnet build AppInfraCdkV1.sln --no-restore
    
    - name: Validate Naming Conventions
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üîç Validating naming conventions for ${{ matrix.app }} in ${{ matrix.environment }}..."
        export CDK_ENVIRONMENT=${{ matrix.environment }}
        export CDK_APPLICATION=${{ matrix.app }}
        dotnet run -- --validate-only
        echo "‚úÖ Naming conventions validated successfully"
    
    - name: Display Resource Names
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üìù Resource names for ${{ matrix.app }} in ${{ matrix.environment }}:"
        export CDK_ENVIRONMENT=${{ matrix.environment }}
        export CDK_APPLICATION=${{ matrix.app }}
        dotnet run -- --show-names-only

  validate-infrastructure:
    needs: [validate-naming-conventions, run-tests]
    runs-on: ubuntu-latest
    environment: development
    strategy:
      matrix:
        app: [TrialFinderV2]
        environment: [Development]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Setup Node.js (for CDK CLI)
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install CDK CLI
      run: npm install -g aws-cdk
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
    
    - name: Restore dependencies
      run: dotnet restore AppInfraCdkV1.sln
    
    - name: Build
      run: dotnet build AppInfraCdkV1.sln --no-restore
    
    - name: Run tests
      run: dotnet test AppInfraCdkV1.sln --no-build --verbosity normal
    
    - name: CDK Synth with Naming Validation
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üèóÔ∏è  Synthesizing CDK template with naming validation..."
        export CDK_ENVIRONMENT=${{ matrix.environment }}
        cdk synth
        echo "‚úÖ CDK synthesis completed with naming conventions enforced"
    
    - name: CDK Diff (if not destructive)
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üîç Checking for infrastructure changes..."
        export CDK_ENVIRONMENT=${{ matrix.environment }}
        cdk diff || true
        echo "‚úÖ Infrastructure diff completed"

  run-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: ['8.0.x']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
    
    - name: Restore dependencies
      run: dotnet restore AppInfraCdkV1.sln
    
    - name: Build solution
      run: dotnet build AppInfraCdkV1.sln --no-restore --configuration Release
    
    - name: Run All Tests with Coverage
      run: |
        dotnet test AppInfraCdkV1.Tests/AppInfraCdkV1.Tests.csproj \
          --no-build \
          --configuration Release \
          --collect:"XPlat Code Coverage" \
          --results-directory ./coverage \
          --settings coverlet.runsettings \
          --logger trx \
          --verbosity normal
    
    - name: Install ReportGenerator
      run: dotnet tool install --global dotnet-reportgenerator-globaltool
    
    - name: Generate Coverage Report
      run: |
        reportgenerator \
          -reports:"coverage/**/coverage.cobertura.xml" \
          -targetdir:"coverage/report" \
          -reporttypes:"Html;Cobertura;JsonSummary" \
          -verbosity:Info
    
    - name: Install bc for calculations
      run: sudo apt-get update && sudo apt-get install -y bc
    
    - name: Check Coverage Threshold
      run: |
        # Extract coverage percentage from the JSON summary
        COVERAGE=$(cat coverage/report/Summary.json | jq -r '.summary.linecoverage')
        echo "Current coverage: $COVERAGE%"
        
        # Check if coverage meets minimum threshold (70%)
        # Note: Infrastructure projects (Deploy, Stacks) are excluded from coverage
        if (( $(echo "$COVERAGE >= 70" | bc -l) )); then
          echo "‚úÖ Coverage check passed: $COVERAGE% >= 70%"
        else
          echo "‚ùå Coverage check failed: $COVERAGE% < 70%"
          echo "Please add more unit tests to increase coverage above 70%"
          exit 1
        fi
    
    - name: Upload Coverage Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: coverage/report/
    
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: "**/*.trx"
    
    - name: Comment Coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          try {
            const summaryPath = 'coverage/report/Summary.json';
            if (fs.existsSync(summaryPath)) {
              const summary = JSON.parse(fs.readFileSync(summaryPath, 'utf8'));
              const coverage = summary.summary.linecoverage;
              const status = coverage >= 70 ? '‚úÖ' : '‚ùå';
              const coverageComment = `## üìä Test Coverage Report
              
              ${status} **Line Coverage: ${coverage.toFixed(1)}%**
              
              - **Minimum Required**: 70%
              - **Status**: ${coverage >= 70 ? 'PASSED' : 'FAILED'}
              - **Excluded from Coverage**: Infrastructure projects (Deploy, Stacks)
              - **Core Business Logic**: ~81% (AppInfraCdkV1.Core)
              
              ${coverage < 70 ? '‚ö†Ô∏è Coverage is below the required threshold. Please add more unit tests.' : 'üéâ Coverage meets the required threshold!'}
              
              [View detailed coverage report in artifacts](${context.payload.pull_request.html_url}/checks)`;
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: coverageComment
              });
            }
          } catch (error) {
            console.log('Could not post coverage comment:', error.message);
          }

  comment-naming-examples:
    needs: [validate-naming-conventions, run-tests]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    # Runs for both push and pull_request events
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Build
      run: |
        dotnet restore AppInfraCdkV1.sln
        dotnet build AppInfraCdkV1.sln --no-restore
    
    - name: Generate Naming Examples
      id: naming
      run: |
        cd AppInfraCdkV1.Deploy
        echo "## üìù Resource Naming Examples" >> naming_output.md
        echo "" >> naming_output.md
        echo "### TrialFinderV2 Development Resources" >> naming_output.md
        echo "\`\`\`" >> naming_output.md
        export CDK_ENVIRONMENT=Development
        export CDK_APPLICATION=TrialFinderV2
        dotnet run -- --show-names-only >> naming_output.md
        echo "\`\`\`" >> naming_output.md
        echo "" >> naming_output.md
        echo "### TrialFinderV2 Production Resources" >> naming_output.md
        echo "\`\`\`" >> naming_output.md
        export CDK_ENVIRONMENT=Production
        export CDK_APPLICATION=TrialFinderV2
        dotnet run -- --show-names-only >> naming_output.md
        echo "\`\`\`" >> naming_output.md
        echo "" >> naming_output.md
        echo "‚úÖ All resource names follow the established naming conventions!" >> naming_output.md
        
        # Set output for use in comment
        echo "NAMING_OUTPUT<<EOF" >> $GITHUB_OUTPUT
        cat naming_output.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Comment with Naming Examples
      uses: actions/github-script@v7
      with:
        script: |
          const namingOutput = process.env.NAMING_OUTPUT;
          
          if (context.eventName === 'pull_request') {
            // Comment on the pull request
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: namingOutput
            });
            console.log('‚úÖ Posted comment on PR #' + context.issue.number);
          } else if (context.eventName === 'push') {
            // Comment on the commit
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: namingOutput
            });
            console.log('‚úÖ Posted comment on commit ' + context.sha);
          }
      env:
        NAMING_OUTPUT: ${{ steps.naming.outputs.NAMING_OUTPUT }}
