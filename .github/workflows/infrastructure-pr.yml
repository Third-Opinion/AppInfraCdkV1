name: Infrastructure Validation

on:
  push:
    branches:
      - '**'  # Run on all branches
  pull_request:
    branches:
      - master
      - develop
    paths:
    - 'AppInfraCdkV1.Core/**'
    - 'AppInfraCdkV1.Stacks/**'
    - 'AppInfraCdkV1.Apps/**'
    - 'AppInfraCdkV1.Deploy/**'
    - 'AppInfraCdkV1.Tests/**'
    - '.github/workflows/**'
    - '*.sln'
    - '*.csproj'

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

jobs:
  validate-naming:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [TrialFinderV2]
        environment: [Development, Production]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Restore dependencies
      run: dotnet restore AppInfraCdkV1.sln
    
    - name: Build
      run: dotnet build AppInfraCdkV1.sln --no-restore
    
    - name: Validate Naming Conventions
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üîç Validating naming conventions for ${{ matrix.app }} in ${{ matrix.environment }}..."
        export CDK_ENVIRONMENT=${{ matrix.environment }}
        export CDK_APPLICATION=${{ matrix.app }}
        dotnet run -- --validate-only
        echo "‚úÖ Naming conventions validated successfully"
    
    - name: Display Resource Names
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üìù Resource names for ${{ matrix.app }} in ${{ matrix.environment }}:"
        export CDK_ENVIRONMENT=${{ matrix.environment }}
        export CDK_APPLICATION=${{ matrix.app }}
        dotnet run -- --show-names-only

  validate-infra:
    needs: [validate-naming, test]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [TrialFinderV2]
        environment: [Development]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Setup Node.js (for CDK CLI)
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install CDK CLI
      run: npm install -g aws-cdk
    
    - name: Install jq for JSON comparison
      run: sudo apt-get update && sudo apt-get install -y jq
    
    - name: Debug GitHub Context
      run: |
        echo "GitHub Actor: ${{ github.actor }}"
        echo "GitHub Repository: ${{ github.repository }}"
        echo "GitHub Ref: ${{ github.ref }}"
        echo "GitHub Event Name: ${{ github.event_name }}"
        echo "GitHub SHA: ${{ github.sha }}"
        echo "Is Pull Request: ${{ github.event_name == 'pull_request' }}"
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          echo "PR Number: ${{ github.event.pull_request.number }}"
          echo "PR Head Ref: ${{ github.head_ref }}"
          echo "PR Base Ref: ${{ github.base_ref }}"
        fi
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::615299752206:role/dev-cdk-role-ue2-github-actions
        role-session-name: GitHubActions-PR-${{ github.run_id }}
        aws-region: us-east-2
    
    - name: Restore dependencies
      run: dotnet restore AppInfraCdkV1.sln
    
    - name: Build
      run: dotnet build AppInfraCdkV1.sln --no-restore
    
    - name: Run tests
      run: dotnet test AppInfraCdkV1.sln --no-build --verbosity normal
    
    - name: CDK Synth Base Stack
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üèóÔ∏è  Synthesizing base stack (shared infrastructure)..."
        export CDK_ENVIRONMENT=${{ matrix.environment }}
        export CDK_APPLICATION=${{ matrix.app }}
        CDK_DEPLOY_BASE=true cdk synth
        echo "‚úÖ Base stack synthesis completed"
    
    - name: Validate Base Stack Changes (No Deploy)
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üîç Checking for base stack changes..."
        export CDK_ENVIRONMENT=${{ matrix.environment }}
        export CDK_APPLICATION=${{ matrix.app }}
        
        # Generate current base stack template
        CDK_DEPLOY_BASE=true cdk synth > current-base-stack.json 2>/dev/null || {
          echo "‚ùå Failed to synthesize base stack"
          exit 1
        }
        
        # Check if we have a reference template in the repo
        REFERENCE_FILE="../.github/templates/base-stack-template.json"
        if [ ! -f "$REFERENCE_FILE" ]; then
          echo "‚ö†Ô∏è  No reference base stack template found at $REFERENCE_FILE"
          echo "üìã Creating initial reference template..."
          mkdir -p ../.github/templates
          cp current-base-stack.json "$REFERENCE_FILE"
          echo "‚úÖ Initial reference template created."
          echo "üîÑ This template will be used for future base stack change detection."
          echo "‚úÖ Base stack synthesis completed successfully."
          exit 0
        fi
        
        # Compare templates (ignore metadata that changes on every synth)
        echo "üîÑ Comparing current base stack with reference template..."
        
        # Use jq to normalize templates for comparison (remove volatile metadata)
        if command -v jq >/dev/null 2>&1; then
          # Remove CDK metadata and version info that changes between synths
          jq 'del(.Rules, .Metadata, .Parameters)' current-base-stack.json > current-normalized.json
          jq 'del(.Rules, .Metadata, .Parameters)' "$REFERENCE_FILE" > reference-normalized.json
          
          if diff -q current-normalized.json reference-normalized.json >/dev/null; then
            echo "‚úÖ Base stack unchanged - validation passed"
          else
            echo "‚ùå BASE STACK HAS CHANGED!"
            echo ""
            echo "üö® The base stack template has been modified."
            echo "üìã This indicates changes to shared infrastructure (VPC, security groups, etc.)"
            echo ""
            echo "üõ†Ô∏è  To deploy base stack changes:"
            echo "   1. Create a PR to 'develop' or 'master' branch"
            echo "   2. The deployment workflow will handle base stack updates"
            echo "   3. Merge the PR to apply the changes"
            echo ""
            echo "üìù Base stack changes detected in normalized comparison:"
            echo "‚ÑπÔ∏è  Showing first 50 lines of differences:"
            diff current-normalized.json reference-normalized.json | head -50 || true
            echo ""
            echo "‚ùå Failing validation to prevent unexpected base stack changes"
            exit 1
          fi
        else
          # Fallback comparison without jq
          echo "‚ö†Ô∏è  jq not available, using direct file comparison"
          if diff -q current-base-stack.json "$REFERENCE_FILE" >/dev/null; then
            echo "‚úÖ Base stack unchanged - validation passed"
          else
            echo "‚ùå BASE STACK HAS CHANGED!"
            echo ""
            echo "üö® The base stack template has been modified."
            echo "üìã This indicates changes to shared infrastructure (VPC, security groups, etc.)"
            echo ""
            echo "üõ†Ô∏è  To deploy base stack changes:"
            echo "   1. Create a PR to 'develop' or 'master' branch"
            echo "   2. The deployment workflow will handle base stack updates"
            echo "   3. Merge the PR to apply the changes"
            echo ""
            echo "üìù First 30 lines of detected changes:"
            diff current-base-stack.json "$REFERENCE_FILE" | head -30 || true
            echo ""
            echo "‚ùå Failing validation to prevent unexpected base stack changes"
            exit 1
          fi
        fi
    
    - name: Validate Stack Configuration
      run: |
        echo "üîç Validating TrialFinderV2 stack configuration..."
        if [ ! -f "TrialFinderV2-stack-config.json" ]; then
          echo "‚ùå TrialFinderV2-stack-config.json not found"
          exit 1
        fi
        
        # Parse stack configuration and validate stack files exist
        STACK_CONFIG=$(cat TrialFinderV2-stack-config.json)
        echo "üìã Found stack configuration for TrialFinderV2"
        
        # Check each stack file exists
        ALB_STACK_FILE="AppInfraCdkV1.Apps/TrialFinderV2/TrialFinderV2AlbStack.cs"
        ECS_STACK_FILE="AppInfraCdkV1.Apps/TrialFinderV2/TrialFinderV2EcsStack.cs" 
        DATA_STACK_FILE="AppInfraCdkV1.Apps/TrialFinderV2/TrialFinderV2DataStack.cs"
        
        for stack_file in "$ALB_STACK_FILE" "$ECS_STACK_FILE" "$DATA_STACK_FILE"; do
          if [ ! -f "$stack_file" ]; then
            echo "‚ùå Stack file not found: $stack_file"
            exit 1
          else
            echo "‚úÖ Stack file exists: $stack_file"
          fi
        done
        
        echo "‚úÖ All TrialFinderV2 stack files validated"

    - name: CDK Synth TrialFinderV2AlbStack
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üèóÔ∏è  Synthesizing TrialFinderV2AlbStack..."
        export CDK_ENVIRONMENT=${{ matrix.environment }}
        export CDK_APPLICATION=${{ matrix.app }}
        export CDK_STACK_TYPE=ALB
        cdk synth || {
          echo "‚ùå Failed to synthesize TrialFinderV2AlbStack"
          exit 1
        }
        echo "‚úÖ TrialFinderV2AlbStack synthesis completed"

    - name: CDK Synth TrialFinderV2EcsStack
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üèóÔ∏è  Synthesizing TrialFinderV2EcsStack..."
        export CDK_ENVIRONMENT=${{ matrix.environment }}
        export CDK_APPLICATION=${{ matrix.app }}
        export CDK_STACK_TYPE=ECS
        cdk synth || {
          echo "‚ùå Failed to synthesize TrialFinderV2EcsStack"
          exit 1
        }
        echo "‚úÖ TrialFinderV2EcsStack synthesis completed"

    - name: CDK Synth TrialFinderV2DataStack
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üèóÔ∏è  Synthesizing TrialFinderV2DataStack..."
        export CDK_ENVIRONMENT=${{ matrix.environment }}
        export CDK_APPLICATION=${{ matrix.app }}
        export CDK_STACK_TYPE=DATA
        cdk synth || {
          echo "‚ùå Failed to synthesize TrialFinderV2DataStack"
          exit 1
        }
        echo "‚úÖ TrialFinderV2DataStack synthesis completed"
    
    - name: CDK Diff TrialFinderV2 Stacks
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üîç Checking for TrialFinderV2 infrastructure changes..."
        export CDK_ENVIRONMENT=${{ matrix.environment }}
        export CDK_APPLICATION=${{ matrix.app }}
        
        echo "üìã Checking ALB Stack changes..."
        export CDK_STACK_TYPE=ALB
        cdk diff || true
        
        echo "üìã Checking ECS Stack changes..."
        export CDK_STACK_TYPE=ECS
        cdk diff || true
        
        echo "üìã Checking Data Stack changes..."
        export CDK_STACK_TYPE=DATA
        cdk diff || true
        
        echo "‚úÖ All TrialFinderV2 stack diffs completed"
    

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: ['8.0.x']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
    
    - name: Restore dependencies
      run: dotnet restore AppInfraCdkV1.sln
    
    - name: Build solution
      run: dotnet build AppInfraCdkV1.sln --no-restore --configuration Release
    
    - name: Run All Tests with Coverage
      run: |
        dotnet test AppInfraCdkV1.Tests/AppInfraCdkV1.Tests.csproj \
          --no-build \
          --configuration Release \
          --collect:"XPlat Code Coverage" \
          --results-directory ./coverage \
          --settings coverlet.runsettings \
          --logger trx \
          --verbosity normal
    
    - name: Install ReportGenerator
      run: dotnet tool install --global dotnet-reportgenerator-globaltool
    
    - name: Generate Coverage Report
      run: |
        reportgenerator \
          -reports:"coverage/**/coverage.cobertura.xml" \
          -targetdir:"coverage/report" \
          -reporttypes:"Html;Cobertura;JsonSummary" \
          -verbosity:Info
    
    - name: Install bc for calculations
      run: sudo apt-get update && sudo apt-get install -y bc
    
    - name: Report Coverage Results
      run: |
        # Extract coverage percentage from the JSON summary
        COVERAGE=$(cat coverage/report/Summary.json | jq -r '.summary.linecoverage')
        echo "Current coverage: $COVERAGE%"
        
        # Report coverage results without failing the build
        # Note: Infrastructure projects (Deploy, Stacks) are excluded from coverage
        if (( $(echo "$COVERAGE >= 70" | bc -l) )); then
          echo "‚úÖ Coverage check passed: $COVERAGE% >= 70%"
        else
          echo "‚ö†Ô∏è Coverage is below target: $COVERAGE% < 70%"
          echo "Consider adding more unit tests to increase coverage above 70%"
        fi
        
        # Save coverage percentage for badge generation
        echo "COVERAGE_PERCENTAGE=$COVERAGE" >> $GITHUB_ENV
    
    - name: Create Coverage Badge
      run: |
        # Create coverage badge using shields.io format
        COVERAGE=$(cat coverage/report/Summary.json | jq -r '.summary.linecoverage')
        COVERAGE_INT=$(printf "%.0f" "$COVERAGE")
        
        # Determine badge color based on coverage percentage
        if (( $(echo "$COVERAGE >= 80" | bc -l) )); then
          COLOR="brightgreen"
        elif (( $(echo "$COVERAGE >= 70" | bc -l) )); then
          COLOR="yellow"
        else
          COLOR="red"
        fi
        
        # Create badge JSON
        mkdir -p badges
        cat > badges/coverage.json << EOF
        {
          "schemaVersion": 1,
          "label": "coverage",
          "message": "${COVERAGE_INT}%",
          "color": "${COLOR}"
        }
        EOF
        
        echo "Coverage badge created: ${COVERAGE_INT}% (${COLOR})"
    
    - name: Upload Coverage Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: coverage/report/
    
    - name: Upload Coverage Badge
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-badge
        path: badges/coverage.json
    
    - name: Commit Coverage Badge
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add badges/coverage.json
        git diff --staged --quiet || git commit -m "Update coverage badge [skip ci]"
        git push
    
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: "**/*.trx"
    
    - name: Comment Coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          try {
            const summaryPath = 'coverage/report/Summary.json';
            if (fs.existsSync(summaryPath)) {
              const summary = JSON.parse(fs.readFileSync(summaryPath, 'utf8'));
              const coverage = summary.summary.linecoverage;
              const branchCoverage = summary.summary.branchcoverage;
              
              // Determine status and color
              const status = coverage >= 70 ? '‚úÖ' : '‚ö†Ô∏è';
              const statusText = coverage >= 70 ? 'MEETS TARGET' : 'BELOW TARGET';
              
              // Create detailed coverage breakdown
              let coverageBreakdown = '';
              if (summary.coverage && summary.coverage.length > 0) {
                coverageBreakdown = '\n### üìà Coverage by Assembly\n\n';
                summary.coverage.forEach(assembly => {
                  const assemblyName = assembly.name.replace(/AppInfraCdkV1\./, '');
                  const lineCov = assembly.summary.linecoverage;
                  const branchCov = assembly.summary.branchcoverage;
                  const icon = lineCov >= 70 ? '‚úÖ' : '‚ö†Ô∏è';
                  coverageBreakdown += `${icon} **${assemblyName}**: ${lineCov.toFixed(1)}% lines, ${branchCov.toFixed(1)}% branches\n`;
                });
              }
              
              const coverageComment = `## üìä Test Coverage Report
              
              ${status} **Overall Coverage: ${coverage.toFixed(1)}%** (${statusText})
              
              | Metric | Value | Target |
              |--------|-------|--------|
              | **Line Coverage** | ${coverage.toFixed(1)}% | 70% |
              | **Branch Coverage** | ${branchCoverage.toFixed(1)}% | - |
              | **Status** | ${statusText} | - |
              
              ${coverageBreakdown}
              
              ### üìã Coverage Configuration
              - **Included**: Core business logic (AppInfraCdkV1.Core, AppInfraCdkV1.Apps)
              - **Excluded**: Infrastructure projects (Deploy, Stacks), test assemblies
              - **Note**: Build will not fail for coverage below target
              
              ${coverage < 70 ? 'üí° **Tip**: Consider adding more unit tests to increase coverage above 70%' : 'üéâ **Great job!** Coverage meets the target threshold!'}
              
              [üìÅ View detailed HTML coverage report in artifacts](${context.payload.pull_request.html_url}/checks)`;
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: coverageComment
              });
            }
          } catch (error) {
            console.log('Could not post coverage comment:', error.message);
          }

  comment-naming:
    needs: [validate-naming, test]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    # Runs for both push and pull_request events
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Build
      run: |
        dotnet restore AppInfraCdkV1.sln
        dotnet build AppInfraCdkV1.sln --no-restore
    
    - name: Generate Naming Examples
      id: naming
      run: |
        cd AppInfraCdkV1.Deploy
        echo "## üìù Resource Naming Examples" >> naming_output.md
        echo "" >> naming_output.md
        echo "### TrialFinderV2 Development Resources" >> naming_output.md
        echo "\`\`\`" >> naming_output.md
        export CDK_ENVIRONMENT=Development
        export CDK_APPLICATION=TrialFinderV2
        dotnet run -- --show-names-only >> naming_output.md
        echo "\`\`\`" >> naming_output.md
        echo "" >> naming_output.md
        echo "### TrialFinderV2 Production Resources" >> naming_output.md
        echo "\`\`\`" >> naming_output.md
        export CDK_ENVIRONMENT=Production
        export CDK_APPLICATION=TrialFinderV2
        dotnet run -- --show-names-only >> naming_output.md
        echo "\`\`\`" >> naming_output.md
        echo "" >> naming_output.md
        echo "‚úÖ All resource names follow the established naming conventions!" >> naming_output.md
        
        # Set output for use in comment
        echo "NAMING_OUTPUT<<EOF" >> $GITHUB_OUTPUT
        cat naming_output.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Comment with Naming Examples
      uses: actions/github-script@v7
      with:
        script: |
          const namingOutput = process.env.NAMING_OUTPUT;
          
          if (context.eventName === 'pull_request') {
            // Comment on the pull request
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: namingOutput
            });
            console.log('‚úÖ Posted comment on PR #' + context.issue.number);
          } else if (context.eventName === 'push') {
            // Comment on the commit
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: namingOutput
            });
            console.log('‚úÖ Posted comment on commit ' + context.sha);
          }
      env:
        NAMING_OUTPUT: ${{ steps.naming.outputs.NAMING_OUTPUT }}