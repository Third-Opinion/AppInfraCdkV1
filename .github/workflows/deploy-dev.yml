name: Deploy to Development

on:
  push:
    branches: 
      - develop
      - 'feature/**'

env:
  CDK_ENVIRONMENT: Development
  AWS_REGION: us-east-2

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

jobs:
  # Build and test job runs for all branches
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Restore dependencies
      run: dotnet restore AppInfraCdkV1.sln
    
    - name: Build
      run: dotnet build AppInfraCdkV1.sln --no-restore --configuration Release
    
    - name: Run tests
      run: dotnet test AppInfraCdkV1.sln --no-build --configuration Release --verbosity normal

  # CDK Diff jobs run for develop and feature branches - grouped by application for efficiency
  cdk-diff-trialfinder:
    if: github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/feature/')
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: development
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Setup Node.js (for CDK CLI)
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install CDK CLI
      run: npm install -g aws-cdk
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/dev-cdk-role-ue2-github-actions
        role-session-name: GitHubActions-Diff-${{ github.run_id }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Restore dependencies
      run: dotnet restore AppInfraCdkV1.sln
    
    - name: Build
      run: dotnet build AppInfraCdkV1.sln --no-restore --configuration Release
    
    - name: CDK Diff for TrialFinderV2 - ALB
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üîç Running CDK diff for TrialFinderV2 - ALB stack..."
        export CDK_STACK_TYPE=ALB
        cdk diff --app="dotnet run -- --app=TrialFinderV2 --environment=${{ env.CDK_ENVIRONMENT }}" || true
    
    - name: CDK Diff for TrialFinderV2 - COGNITO
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üîç Running CDK diff for TrialFinderV2 - COGNITO stack..."
        export CDK_STACK_TYPE=COGNITO
        cdk diff --app="dotnet run -- --app=TrialFinderV2 --environment=${{ env.CDK_ENVIRONMENT }}" || true
    
    - name: CDK Diff for TrialFinderV2 - ECS
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üîç Running CDK diff for TrialFinderV2 - ECS stack..."
        export CDK_STACK_TYPE=ECS
        cdk diff --app="dotnet run -- --app=TrialFinderV2 --environment=${{ env.CDK_ENVIRONMENT }}" || true
    
    - name: CDK Diff for TrialFinderV2 - DATA
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üîç Running CDK diff for TrialFinderV2 - DATA stack..."
        export CDK_STACK_TYPE=DATA
        cdk diff --app="dotnet run -- --app=TrialFinderV2 --environment=${{ env.CDK_ENVIRONMENT }}" || true

  cdk-diff-trialmatch:
    if: github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/feature/')
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: development
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Setup Node.js (for CDK CLI)
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install CDK CLI
      run: npm install -g aws-cdk
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/dev-cdk-role-ue2-github-actions
        role-session-name: GitHubActions-Diff-${{ github.run_id }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Restore dependencies
      run: dotnet restore AppInfraCdkV1.sln
    
    - name: Build
      run: dotnet build AppInfraCdkV1.sln --no-restore --configuration Release
    
    - name: CDK Diff for TrialMatch - ALB
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üîç Running CDK diff for TrialMatch - ALB stack..."
        export CDK_STACK_TYPE=ALB
        cdk diff --app="dotnet run -- --app=TrialMatch --environment=${{ env.CDK_ENVIRONMENT }}" || true
    
    - name: CDK Diff for TrialMatch - COGNITO
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üîç Running CDK diff for TrialMatch - COGNITO stack..."
        export CDK_STACK_TYPE=COGNITO
        cdk diff --app="dotnet run -- --app=TrialMatch --environment=${{ env.CDK_ENVIRONMENT }}" || true
    
    - name: CDK Diff for TrialMatch - ECS
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üîç Running CDK diff for TrialMatch - ECS stack..."
        export CDK_STACK_TYPE=ECS
        cdk diff --app="dotnet run -- --app=TrialMatch --environment=${{ env.CDK_ENVIRONMENT }}" || true
    
    - name: CDK Diff for TrialMatch - DATA
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üîç Running CDK diff for TrialMatch - DATA stack..."
        export CDK_STACK_TYPE=DATA
        cdk diff --app="dotnet run -- --app=TrialMatch --environment=${{ env.CDK_ENVIRONMENT }}" || true

  cdk-diff-lakeformation:
    if: github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/feature/')
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: development
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Setup Node.js (for CDK CLI)
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install CDK CLI
      run: npm install -g aws-cdk
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/dev-cdk-role-ue2-github-actions
        role-session-name: GitHubActions-Diff-${{ github.run_id }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Restore dependencies
      run: dotnet restore AppInfraCdkV1.sln
    
    - name: Build
      run: dotnet build AppInfraCdkV1.sln --no-restore --configuration Release
    
    - name: CDK Diff for LakeFormation
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üîç Running CDK diff for LakeFormation..."
        cdk diff --app="dotnet run -- --app=LakeFormation --environment=${{ env.CDK_ENVIRONMENT }}" || true

  # Base deployment job only runs for develop branch
  deploy-base:
    if: github.ref == 'refs/heads/develop'
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: development
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Setup Node.js (for CDK CLI)
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install CDK CLI
      run: npm install -g aws-cdk
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/dev-cdk-role-ue2-github-actions
        role-session-name: GitHubActions-Deploy-${{ github.run_id }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Restore dependencies
      run: dotnet restore AppInfraCdkV1.sln
    
    - name: Build
      run: dotnet build AppInfraCdkV1.sln --no-restore --configuration Release
    
    - name: Run tests
      run: dotnet test AppInfraCdkV1.sln --no-build --configuration Release --verbosity normal
    
    - name: CDK Bootstrap (if needed)
      run: |
        cd AppInfraCdkV1.Deploy
        cdk bootstrap --app="dotnet run -- --deploy-base --environment=${{ env.CDK_ENVIRONMENT }}" \
                      --require-approval never
    
    - name: Deploy Base Stack
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üöÄ Deploying base infrastructure to ${{ env.CDK_ENVIRONMENT }}..."
        cdk deploy --app="dotnet run -- --deploy-base --environment=${{ env.CDK_ENVIRONMENT }}" \
                  --require-approval never \
                  --outputs-file base-outputs.json
        echo "‚úÖ Base stack deployment completed successfully!"
    
    - name: Upload base outputs
      uses: actions/upload-artifact@v4
      with:
        name: base-outputs-dev
        path: AppInfraCdkV1.Deploy/base-outputs.json

  deploy-alb:
    if: github.ref == 'refs/heads/develop'
    needs: deploy-base
    runs-on: ubuntu-latest
    environment: development
    strategy:
      matrix:
        app: [TrialFinderV2, TrialMatch]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Setup Node.js (for CDK CLI)
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install CDK CLI
      run: npm install -g aws-cdk
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/dev-cdk-role-ue2-github-actions
        role-session-name: GitHubActions-Deploy-${{ github.run_id }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Restore dependencies
      run: dotnet restore AppInfraCdkV1.sln
    
    - name: Build
      run: dotnet build AppInfraCdkV1.sln --no-restore --configuration Release
    
    - name: Validate Naming
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üîç Validating naming for ${{ matrix.app }} in ${{ env.CDK_ENVIRONMENT }}..."
        dotnet run -- --app=${{ matrix.app }} --environment=${{ env.CDK_ENVIRONMENT }} --validate-only || exit 1
    
    - name: Display Resource Names
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üìù Resource names that will be created for ALB stack:"
        dotnet run -- --app=${{ matrix.app }} --environment=${{ env.CDK_ENVIRONMENT }} --show-names-only
    
    - name: CDK Diff for ALB Stack
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üîç Checking what changes will be made for ${{ matrix.app }} ALB stack..."
        export CDK_STACK_TYPE=ALB
        cdk diff --app="dotnet run -- --app=${{ matrix.app }} --environment=${{ env.CDK_ENVIRONMENT }}" || true
    
    - name: CDK Deploy ALB Stack
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üöÄ Deploying ${{ matrix.app }} ALB stack to ${{ env.CDK_ENVIRONMENT }}..."
        export CDK_STACK_TYPE=ALB
        cdk deploy --app="dotnet run -- --app=${{ matrix.app }} --environment=${{ env.CDK_ENVIRONMENT }}" \
                  --require-approval never \
                  --outputs-file ${{ matrix.app }}-ALB-outputs.json
        echo "‚úÖ ALB stack deployment completed successfully!"
    
    - name: Display Created ALB Resources
      run: |
        cd AppInfraCdkV1.Deploy
        if [ -f ${{ matrix.app }}-ALB-outputs.json ]; then
          echo "üìã Resources created for ALB stack:"
          cat ${{ matrix.app }}-ALB-outputs.json | jq -r 'to_entries[] | "\(.key): \(.value)"' || cat ${{ matrix.app }}-ALB-outputs.json
        fi
    
    - name: Upload ALB deployment outputs
      uses: actions/upload-artifact@v4
      with:
        name: deployment-outputs-${{ matrix.app }}-ALB-dev
        path: AppInfraCdkV1.Deploy/${{ matrix.app }}-ALB-outputs.json

  deploy-cognito:
    if: github.ref == 'refs/heads/develop'
    needs: deploy-alb
    runs-on: ubuntu-latest
    environment: development
    strategy:
      matrix:
        app: [TrialFinderV2, TrialMatch]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Setup Node.js (for CDK CLI)
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install CDK CLI
      run: npm install -g aws-cdk
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/dev-cdk-role-ue2-github-actions
        role-session-name: GitHubActions-Deploy-${{ github.run_id }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Restore dependencies
      run: dotnet restore AppInfraCdkV1.sln
    
    - name: Build
      run: dotnet build AppInfraCdkV1.sln --no-restore --configuration Release
    
    - name: Validate Naming
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üîç Validating naming for ${{ matrix.app }} in ${{ env.CDK_ENVIRONMENT }}..."
        dotnet run -- --app=${{ matrix.app }} --environment=${{ env.CDK_ENVIRONMENT }} --validate-only || exit 1
    
    - name: Display Resource Names
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üìù Resource names that will be created for COGNITO stack:"
        dotnet run -- --app=${{ matrix.app }} --environment=${{ env.CDK_ENVIRONMENT }} --show-names-only
    
    - name: CDK Diff for COGNITO Stack
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üîç Checking what changes will be made for ${{ matrix.app }} COGNITO stack..."
        export CDK_STACK_TYPE=COGNITO
        cdk diff --app="dotnet run -- --app=${{ matrix.app }} --environment=${{ env.CDK_ENVIRONMENT }}" || true
    
    - name: CDK Deploy COGNITO Stack
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üöÄ Deploying ${{ matrix.app }} COGNITO stack to ${{ env.CDK_ENVIRONMENT }}..."
        export CDK_STACK_TYPE=COGNITO
        cdk deploy --app="dotnet run -- --app=${{ matrix.app }} --environment=${{ env.CDK_ENVIRONMENT }}" \
                  --require-approval never \
                  --outputs-file ${{ matrix.app }}-COGNITO-outputs.json
        echo "‚úÖ COGNITO stack deployment completed successfully!"
    
    - name: Display Created COGNITO Resources
      run: |
        cd AppInfraCdkV1.Deploy
        if [ -f ${{ matrix.app }}-COGNITO-outputs.json ]; then
          echo "üìã Resources created for COGNITO stack:"
          cat ${{ matrix.app }}-COGNITO-outputs.json | jq -r 'to_entries[] | "\(.key): \(.value)"' || cat ${{ matrix.app }}-COGNITO-outputs.json
        fi
    
    - name: Upload COGNITO deployment outputs
      uses: actions/upload-artifact@v4
      with:
        name: deployment-outputs-${{ matrix.app }}-COGNITO-dev
        path: AppInfraCdkV1.Deploy/${{ matrix.app }}-COGNITO-outputs.json

  deploy-ecs:
    if: github.ref == 'refs/heads/develop'
    needs: deploy-cognito
    runs-on: ubuntu-latest
    environment: development
    strategy:
      matrix:
        app: [TrialFinderV2, TrialMatch]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Setup Node.js (for CDK CLI)
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install CDK CLI
      run: npm install -g aws-cdk
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/dev-cdk-role-ue2-github-actions
        role-session-name: GitHubActions-Deploy-${{ github.run_id }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Restore dependencies
      run: dotnet restore AppInfraCdkV1.sln
    
    - name: Build
      run: dotnet build AppInfraCdkV1.sln --no-restore --configuration Release
    
    - name: Validate Naming
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üîç Validating naming for ${{ matrix.app }} in ${{ env.CDK_ENVIRONMENT }}..."
        dotnet run -- --app=${{ matrix.app }} --environment=${{ env.CDK_ENVIRONMENT }} --validate-only || exit 1
    
    - name: Display Resource Names
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üìù Resource names that will be created for ECS stack:"
        dotnet run -- --app=${{ matrix.app }} --environment=${{ env.CDK_ENVIRONMENT }} --show-names-only
    
    - name: CDK Diff for ECS Stack
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üîç Checking what changes will be made for ${{ matrix.app }} ECS stack..."
        export CDK_STACK_TYPE=ECS
        cdk diff --app="dotnet run -- --app=${{ matrix.app }} --environment=${{ env.CDK_ENVIRONMENT }}" || true
    
    - name: CDK Deploy ECS Stack
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üöÄ Deploying ${{ matrix.app }} ECS stack to ${{ env.CDK_ENVIRONMENT }}..."
        export CDK_STACK_TYPE=ECS
        cdk deploy --app="dotnet run -- --app=${{ matrix.app }} --environment=${{ env.CDK_ENVIRONMENT }}" \
                  --require-approval never \
                  --outputs-file ${{ matrix.app }}-ECS-outputs.json
        echo "‚úÖ ECS stack deployment completed successfully!"
    
    - name: Display Created ECS Resources
      run: |
        cd AppInfraCdkV1.Deploy
        if [ -f ${{ matrix.app }}-ECS-outputs.json ]; then
          echo "üìã Resources created for ECS stack:"
          cat ${{ matrix.app }}-ECS-outputs.json | jq -r 'to_entries[] | "\(.key): \(.value)"' || cat ${{ matrix.app }}-ECS-outputs.json
        fi
    
    - name: Upload ECS deployment outputs
      uses: actions/upload-artifact@v4
      with:
        name: deployment-outputs-${{ matrix.app }}-ECS-dev
        path: AppInfraCdkV1.Deploy/${{ matrix.app }}-ECS-outputs.json

  deploy-data:
    if: github.ref == 'refs/heads/develop'
    needs: deploy-ecs
    runs-on: ubuntu-latest
    environment: development
    strategy:
      matrix:
        app: [TrialFinderV2, TrialMatch]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Setup Node.js (for CDK CLI)
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install CDK CLI
      run: npm install -g aws-cdk
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/dev-cdk-role-ue2-github-actions
        role-session-name: GitHubActions-Deploy-${{ github.run_id }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Restore dependencies
      run: dotnet restore AppInfraCdkV1.sln
    
    - name: Build
      run: dotnet build AppInfraCdkV1.sln --no-restore --configuration Release
    
    - name: Validate Naming
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üîç Validating naming for ${{ matrix.app }} in ${{ env.CDK_ENVIRONMENT }}..."
        dotnet run -- --app=${{ matrix.app }} --environment=${{ env.CDK_ENVIRONMENT }} --validate-only || exit 1
    
    - name: Display Resource Names
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üìù Resource names that will be created for DATA stack:"
        dotnet run -- --app=${{ matrix.app }} --environment=${{ env.CDK_ENVIRONMENT }} --show-names-only
    
    - name: CDK Diff for DATA Stack
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üîç Checking what changes will be made for ${{ matrix.app }} DATA stack..."
        export CDK_STACK_TYPE=DATA
        cdk diff --app="dotnet run -- --app=${{ matrix.app }} --environment=${{ env.CDK_ENVIRONMENT }}" || true
    
    - name: CDK Deploy DATA Stack
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üöÄ Deploying ${{ matrix.app }} DATA stack to ${{ env.CDK_ENVIRONMENT }}..."
        export CDK_STACK_TYPE=DATA
        cdk deploy --app="dotnet run -- --app=${{ matrix.app }} --environment=${{ env.CDK_ENVIRONMENT }}" \
                  --require-approval never \
                  --outputs-file ${{ matrix.app }}-DATA-outputs.json
        echo "‚úÖ DATA stack deployment completed successfully!"
    
    - name: Display Created DATA Resources
      run: |
        cd AppInfraCdkV1.Deploy
        if [ -f ${{ matrix.app }}-DATA-outputs.json ]; then
          echo "üìã Resources created for DATA stack:"
          cat ${{ matrix.app }}-DATA-outputs.json | jq -r 'to_entries[] | "\(.key): \(.value)"' || cat ${{ matrix.app }}-DATA-outputs.json
        fi
    
    - name: Upload DATA deployment outputs
      uses: actions/upload-artifact@v4
      with:
        name: deployment-outputs-${{ matrix.app }}-DATA-dev
        path: AppInfraCdkV1.Deploy/${{ matrix.app }}-DATA-outputs.json

  # Lake Formation deployment - Storage Stack
  deploy-lakeformation-storage:
    if: github.ref == 'refs/heads/develop'
    needs: deploy-data
    runs-on: ubuntu-latest
    environment: development
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Setup Node.js (for CDK CLI)
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install CDK CLI
      run: npm install -g aws-cdk
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/dev-cdk-role-ue2-github-actions
        role-session-name: GitHubActions-Deploy-${{ github.run_id }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Restore dependencies
      run: dotnet restore AppInfraCdkV1.sln
    
    - name: Build
      run: dotnet build AppInfraCdkV1.sln --no-restore --configuration Release
    
    - name: List available Lake Formation stacks
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üìã Available Lake Formation stacks:"
        cdk list --app="dotnet run -- --app=LakeFormation --environment=${{ env.CDK_ENVIRONMENT }}"
    
    - name: CDK Diff for Lake Formation Storage Stack
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üîç Checking changes for Lake Formation Storage stack..."
        cdk diff dev-lf-storage-ue2 --app="dotnet run -- --app=LakeFormation --environment=${{ env.CDK_ENVIRONMENT }}" || true
    
    - name: Deploy Lake Formation Storage Stack
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üöÄ Deploying Lake Formation Storage stack to ${{ env.CDK_ENVIRONMENT }}..."
        cdk deploy dev-lf-storage-ue2 --app="dotnet run -- --app=LakeFormation --environment=${{ env.CDK_ENVIRONMENT }}" \
                  --require-approval never \
                  --outputs-file lf-storage-outputs.json
        echo "‚úÖ Lake Formation Storage stack deployment completed!"
    
    - name: Upload storage outputs
      uses: actions/upload-artifact@v4
      with:
        name: lf-storage-outputs-dev
        path: AppInfraCdkV1.Deploy/lf-storage-outputs.json

  # Lake Formation deployment - Setup Stack
  deploy-lakeformation-setup:
    if: github.ref == 'refs/heads/develop'
    needs: deploy-lakeformation-storage
    runs-on: ubuntu-latest
    environment: development
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Setup Node.js (for CDK CLI)
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install CDK CLI
      run: npm install -g aws-cdk
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/dev-cdk-role-ue2-github-actions
        role-session-name: GitHubActions-Deploy-${{ github.run_id }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Restore dependencies
      run: dotnet restore AppInfraCdkV1.sln
    
    - name: Build
      run: dotnet build AppInfraCdkV1.sln --no-restore --configuration Release
    
    - name: CDK Diff for Lake Formation Setup Stack
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üîç Checking changes for Lake Formation Setup stack..."
        cdk diff dev-lf-setup-ue2 --app="dotnet run -- --app=LakeFormation --environment=${{ env.CDK_ENVIRONMENT }}" || true
    
    - name: Deploy Lake Formation Setup Stack
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üöÄ Deploying Lake Formation Setup stack to ${{ env.CDK_ENVIRONMENT }}..."
        cdk deploy dev-lf-setup-ue2 --app="dotnet run -- --app=LakeFormation --environment=${{ env.CDK_ENVIRONMENT }}" \
                  --require-approval never \
                  --outputs-file lf-setup-outputs.json
        echo "‚úÖ Lake Formation Setup stack deployment completed!"
    
    - name: Upload setup outputs
      uses: actions/upload-artifact@v4
      with:
        name: lf-setup-outputs-dev
        path: AppInfraCdkV1.Deploy/lf-setup-outputs.json

  # Lake Formation deployment - Permissions Stack
  deploy-lakeformation-permissions:
    if: github.ref == 'refs/heads/develop'
    needs: deploy-lakeformation-setup
    runs-on: ubuntu-latest
    environment: development
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Setup Node.js (for CDK CLI)
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install CDK CLI
      run: npm install -g aws-cdk
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/dev-cdk-role-ue2-github-actions
        role-session-name: GitHubActions-Deploy-${{ github.run_id }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Restore dependencies
      run: dotnet restore AppInfraCdkV1.sln
    
    - name: Build
      run: dotnet build AppInfraCdkV1.sln --no-restore --configuration Release
    
    - name: CDK Diff for Lake Formation Permissions Stack
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üîç Checking changes for Lake Formation Permissions stack..."
        cdk diff dev-lf-permissions-ue2 --app="dotnet run -- --app=LakeFormation --environment=${{ env.CDK_ENVIRONMENT }}" || true
    
    - name: Deploy Lake Formation Permissions Stack
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üöÄ Deploying Lake Formation Permissions stack to ${{ env.CDK_ENVIRONMENT }}..."
        cdk deploy dev-lf-permissions-ue2 --app="dotnet run -- --app=LakeFormation --environment=${{ env.CDK_ENVIRONMENT }}" \
                  --require-approval never \
                  --outputs-file lf-permissions-outputs.json
        echo "‚úÖ Lake Formation Permissions stack deployment completed!"
    
    - name: Upload permissions outputs
      uses: actions/upload-artifact@v4
      with:
        name: lf-permissions-outputs-dev
        path: AppInfraCdkV1.Deploy/lf-permissions-outputs.json