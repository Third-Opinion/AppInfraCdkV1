name: Deploy to Development

on:
  push:
    branches: [develop]
  pull_request:
    branches: [main]

env:
  CDK_ENVIRONMENT: Development
  AWS_REGION: us-east-2

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

jobs:
  deploy-base:
    runs-on: ubuntu-latest
    environment: development
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Setup Node.js (for CDK CLI)
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install CDK CLI
      run: npm install -g aws-cdk
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/dev-cdk-role-ue2-github-actions
        role-session-name: GitHubActions-Deploy-${{ github.run_id }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Restore dependencies
      run: dotnet restore AppInfraCdkV1.sln
    
    - name: Build
      run: dotnet build AppInfraCdkV1.sln --no-restore --configuration Release
    
    - name: Run tests
      run: dotnet test AppInfraCdkV1.sln --no-build --configuration Release --verbosity normal
    
    - name: CDK Bootstrap (if needed)
      run: |
        cd AppInfraCdkV1.Deploy
        cdk bootstrap --require-approval never
    
    - name: Deploy Base Stack
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üöÄ Deploying base infrastructure to ${{ env.CDK_ENVIRONMENT }}..."
        cdk deploy --app="dotnet run -- --deploy-base --environment=${{ env.CDK_ENVIRONMENT }}" \
                  --require-approval never \
                  --outputs-file base-outputs.json
        echo "‚úÖ Base stack deployment completed successfully!"
    
    - name: Upload base outputs
      uses: actions/upload-artifact@v4
      with:
        name: base-outputs-dev
        path: AppInfraCdkV1.Deploy/base-outputs.json

  deploy-app-stacks:
    needs: deploy-base
    runs-on: ubuntu-latest
    environment: development
    strategy:
      matrix:
        app: [TrialFinderV2]
        stack: [DATA, ALB, ECS]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Setup Node.js (for CDK CLI)
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install CDK CLI
      run: npm install -g aws-cdk
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/dev-cdk-role-ue2-github-actions
        role-session-name: GitHubActions-Deploy-${{ github.run_id }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Restore dependencies
      run: dotnet restore AppInfraCdkV1.sln
    
    - name: Build
      run: dotnet build AppInfraCdkV1.sln --no-restore --configuration Release
    
    - name: Validate Naming
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üîç Validating naming for ${{ matrix.app }} in ${{ env.CDK_ENVIRONMENT }}..."
        dotnet run -- --app=${{ matrix.app }} --environment=${{ env.CDK_ENVIRONMENT }} --validate-only || exit 1
    
    - name: Display Resource Names
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üìù Resource names that will be created for ${{ matrix.stack }} stack:"
        dotnet run -- --app=${{ matrix.app }} --environment=${{ env.CDK_ENVIRONMENT }} --show-names-only
    
    - name: CDK Diff
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üîç Checking what changes will be made for ${{ matrix.app }} ${{ matrix.stack }} stack..."
        export CDK_STACK_TYPE=${{ matrix.stack }}
        cdk diff --app="dotnet run -- --app=${{ matrix.app }} --environment=${{ env.CDK_ENVIRONMENT }}" || true
    
    - name: CDK Deploy
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üöÄ Deploying ${{ matrix.app }} ${{ matrix.stack }} stack to ${{ env.CDK_ENVIRONMENT }}..."
        export CDK_STACK_TYPE=${{ matrix.stack }}
        cdk deploy --app="dotnet run -- --app=${{ matrix.app }} --environment=${{ env.CDK_ENVIRONMENT }}" \
                  --require-approval never \
                  --outputs-file ${{ matrix.app }}-${{ matrix.stack }}-outputs.json
        echo "‚úÖ ${{ matrix.stack }} stack deployment completed successfully!"
    
    - name: Display Created Resources
      run: |
        cd AppInfraCdkV1.Deploy
        if [ -f ${{ matrix.app }}-${{ matrix.stack }}-outputs.json ]; then
          echo "üìã Resources created for ${{ matrix.stack }} stack:"
          cat ${{ matrix.app }}-${{ matrix.stack }}-outputs.json | jq -r 'to_entries[] | "\(.key): \(.value)"' || cat ${{ matrix.app }}-${{ matrix.stack }}-outputs.json
        fi
    
    - name: Upload deployment outputs
      uses: actions/upload-artifact@v4
      with:
        name: deployment-outputs-${{ matrix.app }}-${{ matrix.stack }}-dev
        path: AppInfraCdkV1.Deploy/${{ matrix.app }}-${{ matrix.stack }}-outputs.json
