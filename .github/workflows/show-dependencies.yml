name: Show CDK Dependencies

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to analyze (Development/Production)'
        required: true
        default: 'Development'
        type: choice
        options:
          - Development
          - Production

jobs:
  show-dependencies:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install AWS CDK
        run: npm install -g aws-cdk

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.environment == 'Production' && vars.PROD_AWS_ROLE_ARN || vars.DEV_AWS_ROLE_ARN }}
          aws-region: us-east-2

      - name: Restore .NET dependencies
        run: dotnet restore
        working-directory: AppInfraCdkV1.Deploy

      - name: Show Base Infrastructure Dependencies
        run: |
          echo "================================================="
          echo "üèóÔ∏è  Base Infrastructure Dependencies"
          echo "================================================="
          dotnet run -- --deploy-base cdk list --show-dependencies || echo "No Base stacks found"
        working-directory: AppInfraCdkV1.Deploy
        env:
          CDK_ENVIRONMENT: ${{ inputs.environment }}
          CDK_DEPLOY_BASE: 'true'

      - name: Show TrialFinderV2 Dependencies
        run: |
          echo ""
          echo "================================================="
          echo "üöÄ TrialFinderV2 Application Dependencies"
          echo "================================================="
          dotnet run -- --app=TrialFinderV2 --environment=${{ inputs.environment }} cdk list --show-dependencies || echo "No TrialFinderV2 stacks found"
        working-directory: AppInfraCdkV1.Deploy
        env:
          CDK_ENVIRONMENT: ${{ inputs.environment }}
          CDK_APPLICATION: TrialFinderV2

      - name: Show TrialMatch Dependencies
        run: |
          echo ""
          echo "================================================="
          echo "üéØ TrialMatch Application Dependencies"
          echo "================================================="
          dotnet run -- --app=TrialMatch --environment=${{ inputs.environment }} cdk list --show-dependencies || echo "No TrialMatch stacks found"
        working-directory: AppInfraCdkV1.Deploy
        env:
          CDK_ENVIRONMENT: ${{ inputs.environment }}
          CDK_APPLICATION: TrialMatch

      - name: Show LakeFormation Dependencies
        run: |
          echo ""
          echo "================================================="
          echo "üèûÔ∏è  LakeFormation Application Dependencies"
          echo "================================================="
          dotnet run -- --app=LakeFormation --environment=${{ inputs.environment }} cdk list --show-dependencies || echo "No LakeFormation stacks found"
        working-directory: AppInfraCdkV1.Deploy
        env:
          CDK_ENVIRONMENT: ${{ inputs.environment }}
          CDK_APPLICATION: LakeFormation


      - name: Show Complete Dependency Summary
        run: |
          echo ""
          echo "================================================="
          echo "üìä Complete Dependency Summary for ${{ inputs.environment }}"
          echo "================================================="
          echo ""
          echo "Expected Dependency Chain:"
          echo "1. Base Infrastructure (shared-stack)"
          echo "   ‚Üì"
          echo "2. Application Load Balancer & Cognito (parallel)"
          echo "   ‚Üì"
          echo "3. Data/Storage Stacks (databases, S3 buckets)"
          echo "   ‚Üì" 
          echo "4. ECS Services (depends on ALB, Cognito & Data stores)"
          echo ""
          echo "LakeFormation Chain:"
          echo "1. Storage Stack"
          echo "   ‚Üì"
          echo "2. Setup Stack (depends on Storage)"
          echo "   ‚Üì"
          echo "3. Permissions Stack (depends on Setup)"
          echo "   ‚Üì"
          echo "4. HealthLake Test Instance (depends on Storage)"
          echo ""
          echo "For detailed stack information, run:"
          echo "  cdk list --show-dependencies --app 'dotnet run -- --app=<AppName> --environment=${{ inputs.environment }}'"