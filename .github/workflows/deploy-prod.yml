name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      app:
        description: 'Application to deploy'
        required: true
        default: 'TrialFinderV2'
        type: choice
        options:
        - TrialFinderV2
        # Add other registered applications here
      confirm:
        description: 'Type "deploy" to confirm production deployment'
        required: true
        default: ''

env:
  CDK_ENVIRONMENT: Production
  AWS_REGION: us-east-2

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

jobs:
  validate-input:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
    - name: Validate confirmation
      run: |
        if [ "${{ github.event.inputs.confirm }}" != "deploy" ]; then
          echo "‚ùå Deployment cancelled - confirmation not provided"
          exit 1
        fi
        echo "‚úÖ Production deployment confirmed"

  validate-naming:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: ${{ github.event_name == 'workflow_dispatch' && fromJson(format('["{0}"]', github.event.inputs.app)) || fromJson('["TrialFinderV2"]') }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Restore dependencies
      run: dotnet restore AppInfraCdkV1.sln
    
    - name: Build
      run: dotnet build AppInfraCdkV1.sln --no-restore --configuration Release
    
    - name: Validate Naming
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üîç Validating naming for ${{ matrix.app }} in ${{ env.CDK_ENVIRONMENT }}..."
        dotnet run -- --app=${{ matrix.app }} --environment=${{ env.CDK_ENVIRONMENT }} --validate-only
        echo "‚úÖ Naming validated for production deployment"
    
    - name: Display Production Resource Names
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üìù Production resource names that will be created:"
        dotnet run -- --app=${{ matrix.app }} --environment=${{ env.CDK_ENVIRONMENT }} --show-names-only

  deploy-base-prod:
    needs: [validate-input, validate-naming]
    if: always() && (needs.validate-input.result == 'success' || github.event_name == 'push') && needs.validate-naming.result == 'success'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Setup Node.js (for CDK CLI)
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install CDK CLI
      run: npm install -g aws-cdk
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/prod-tfv2-role-ue2-github-actions
        role-session-name: GitHubActions-Deploy-${{ github.run_id }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Restore dependencies
      run: dotnet restore AppInfraCdkV1.sln
    
    - name: Build
      run: dotnet build AppInfraCdkV1.sln --no-restore --configuration Release
    
    - name: Run tests
      run: dotnet test AppInfraCdkV1.sln --no-build --configuration Release --verbosity normal
    
    - name: CDK Bootstrap (if needed)
      run: |
        cd AppInfraCdkV1.Deploy
        cdk bootstrap --app="dotnet run -- --deploy-base --environment=${{ env.CDK_ENVIRONMENT }}" \
                      --require-approval never
    
    - name: Deploy Base Stack to Production
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üöÄ Deploying base infrastructure to PRODUCTION environment..."
        echo "‚ö†Ô∏è  This is a PRODUCTION deployment!"
        cdk deploy --app="dotnet run -- --deploy-base --environment=${{ env.CDK_ENVIRONMENT }}" \
                  --require-approval never \
                  --outputs-file base-outputs.json
        echo "‚úÖ Base stack deployment completed successfully!"
    
    - name: Upload base outputs
      uses: actions/upload-artifact@v4
      with:
        name: base-outputs-prod
        path: AppInfraCdkV1.Deploy/base-outputs.json

  deploy-alb-prod:
    needs: [validate-input, validate-naming, deploy-base-prod]
    if: always() && (needs.validate-input.result == 'success' || github.event_name == 'push') && needs.validate-naming.result == 'success' && needs.deploy-base-prod.result == 'success'
    runs-on: ubuntu-latest
    environment: production
    strategy:
      matrix:
        app: ${{ github.event_name == 'workflow_dispatch' && fromJson(format('["{0}"]', github.event.inputs.app)) || fromJson('["TrialFinderV2"]') }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Setup Node.js (for CDK CLI)
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install CDK CLI
      run: npm install -g aws-cdk
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/prod-tfv2-role-ue2-github-actions
        role-session-name: GitHubActions-Deploy-${{ github.run_id }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Restore dependencies
      run: dotnet restore AppInfraCdkV1.sln
    
    - name: Build
      run: dotnet build AppInfraCdkV1.sln --no-restore --configuration Release
    
    - name: Run tests
      run: dotnet test AppInfraCdkV1.sln --no-build --configuration Release --verbosity normal
    
    - name: CDK Diff for ALB Stack
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üîç Checking production changes for ${{ matrix.app }} ALB stack..."
        export CDK_STACK_TYPE=ALB
        cdk diff --app="dotnet run -- --app=${{ matrix.app }} --environment=${{ env.CDK_ENVIRONMENT }}"
    
    - name: CDK Deploy ALB Stack to Production
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üöÄ Deploying ${{ matrix.app }} ALB stack to PRODUCTION environment..."
        echo "‚ö†Ô∏è  This is a PRODUCTION deployment!"
        export CDK_STACK_TYPE=ALB
        cdk deploy --app="dotnet run -- --app=${{ matrix.app }} --environment=${{ env.CDK_ENVIRONMENT }}" \
                  --require-approval never \
                  --outputs-file ${{ matrix.app }}-ALB-outputs.json
        echo "‚úÖ ALB stack deployment completed successfully!"
    
    - name: Display Production ALB Resources
      run: |
        cd AppInfraCdkV1.Deploy
        if [ -f ${{ matrix.app }}-ALB-outputs.json ]; then
          echo "üìã Production resources created/updated for ALB stack:"
          cat ${{ matrix.app }}-ALB-outputs.json | jq -r 'to_entries[] | "üè≠ \(.key): \(.value)"' || cat ${{ matrix.app }}-ALB-outputs.json
        fi
    
    - name: Upload ALB deployment outputs
      uses: actions/upload-artifact@v4
      with:
        name: deployment-outputs-${{ matrix.app }}-ALB-prod
        path: AppInfraCdkV1.Deploy/${{ matrix.app }}-ALB-outputs.json

  deploy-cognito-prod:
    needs: [validate-input, validate-naming, deploy-alb-prod]
    if: always() && (needs.validate-input.result == 'success' || github.event_name == 'push') && needs.validate-naming.result == 'success' && needs.deploy-alb-prod.result == 'success'
    runs-on: ubuntu-latest
    environment: production
    strategy:
      matrix:
        app: ${{ github.event_name == 'workflow_dispatch' && fromJson(format('["{0}"]', github.event.inputs.app)) || fromJson('["TrialFinderV2"]') }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Setup Node.js (for CDK CLI)
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install CDK CLI
      run: npm install -g aws-cdk
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/prod-tfv2-role-ue2-github-actions
        role-session-name: GitHubActions-Deploy-${{ github.run_id }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Restore dependencies
      run: dotnet restore AppInfraCdkV1.sln
    
    - name: Build
      run: dotnet build AppInfraCdkV1.sln --no-restore --configuration Release
    
    - name: Run tests
      run: dotnet test AppInfraCdkV1.sln --no-build --configuration Release --verbosity normal
    
    - name: CDK Diff for COGNITO Stack
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üîç Checking production changes for ${{ matrix.app }} COGNITO stack..."
        export CDK_STACK_TYPE=COGNITO
        cdk diff --app="dotnet run -- --app=${{ matrix.app }} --environment=${{ env.CDK_ENVIRONMENT }}"
    
    - name: CDK Deploy COGNITO Stack to Production
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üöÄ Deploying ${{ matrix.app }} COGNITO stack to PRODUCTION environment..."
        echo "‚ö†Ô∏è  This is a PRODUCTION deployment!"
        export CDK_STACK_TYPE=COGNITO
        cdk deploy --app="dotnet run -- --app=${{ matrix.app }} --environment=${{ env.CDK_ENVIRONMENT }}" \
                  --require-approval never \
                  --outputs-file ${{ matrix.app }}-COGNITO-outputs.json
        echo "‚úÖ COGNITO stack deployment completed successfully!"
    
    - name: Display Production COGNITO Resources
      run: |
        cd AppInfraCdkV1.Deploy
        if [ -f ${{ matrix.app }}-COGNITO-outputs.json ]; then
          echo "üìã Production resources created/updated for COGNITO stack:"
          cat ${{ matrix.app }}-COGNITO-outputs.json | jq -r 'to_entries[] | "üè≠ \(.key): \(.value)"' || cat ${{ matrix.app }}-COGNITO-outputs.json
        fi
    
    - name: Upload COGNITO deployment outputs
      uses: actions/upload-artifact@v4
      with:
        name: deployment-outputs-${{ matrix.app }}-COGNITO-prod
        path: AppInfraCdkV1.Deploy/${{ matrix.app }}-COGNITO-outputs.json

  deploy-ecs-prod:
    needs: [validate-input, validate-naming, deploy-cognito-prod]
    if: always() && (needs.validate-input.result == 'success' || github.event_name == 'push') && needs.validate-naming.result == 'success' && needs.deploy-cognito-prod.result == 'success'
    runs-on: ubuntu-latest
    environment: production
    strategy:
      matrix:
        app: ${{ github.event_name == 'workflow_dispatch' && fromJson(format('["{0}"]', github.event.inputs.app)) || fromJson('["TrialFinderV2"]') }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Setup Node.js (for CDK CLI)
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install CDK CLI
      run: npm install -g aws-cdk
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/prod-tfv2-role-ue2-github-actions
        role-session-name: GitHubActions-Deploy-${{ github.run_id }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Restore dependencies
      run: dotnet restore AppInfraCdkV1.sln
    
    - name: Build
      run: dotnet build AppInfraCdkV1.sln --no-restore --configuration Release
    
    - name: Run tests
      run: dotnet test AppInfraCdkV1.sln --no-build --configuration Release --verbosity normal
    
    - name: CDK Diff for ECS Stack
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üîç Checking production changes for ${{ matrix.app }} ECS stack..."
        export CDK_STACK_TYPE=ECS
        cdk diff --app="dotnet run -- --app=${{ matrix.app }} --environment=${{ env.CDK_ENVIRONMENT }}"
    
    - name: CDK Deploy ECS Stack to Production
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üöÄ Deploying ${{ matrix.app }} ECS stack to PRODUCTION environment..."
        echo "‚ö†Ô∏è  This is a PRODUCTION deployment!"
        export CDK_STACK_TYPE=ECS
        cdk deploy --app="dotnet run -- --app=${{ matrix.app }} --environment=${{ env.CDK_ENVIRONMENT }}" \
                  --require-approval never \
                  --outputs-file ${{ matrix.app }}-ECS-outputs.json
        echo "‚úÖ ECS stack deployment completed successfully!"
    
    - name: Display Production ECS Resources
      run: |
        cd AppInfraCdkV1.Deploy
        if [ -f ${{ matrix.app }}-ECS-outputs.json ]; then
          echo "üìã Production resources created/updated for ECS stack:"
          cat ${{ matrix.app }}-ECS-outputs.json | jq -r 'to_entries[] | "üè≠ \(.key): \(.value)"' || cat ${{ matrix.app }}-ECS-outputs.json
        fi
    
    - name: Upload ECS deployment outputs
      uses: actions/upload-artifact@v4
      with:
        name: deployment-outputs-${{ matrix.app }}-ECS-prod
        path: AppInfraCdkV1.Deploy/${{ matrix.app }}-ECS-outputs.json

  deploy-data-prod:
    needs: [validate-input, validate-naming, deploy-ecs-prod]
    if: always() && (needs.validate-input.result == 'success' || github.event_name == 'push') && needs.validate-naming.result == 'success' && needs.deploy-ecs-prod.result == 'success'
    runs-on: ubuntu-latest
    environment: production
    strategy:
      matrix:
        app: ${{ github.event_name == 'workflow_dispatch' && fromJson(format('["{0}"]', github.event.inputs.app)) || fromJson('["TrialFinderV2"]') }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Setup Node.js (for CDK CLI)
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install CDK CLI
      run: npm install -g aws-cdk
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/prod-tfv2-role-ue2-github-actions
        role-session-name: GitHubActions-Deploy-${{ github.run_id }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Restore dependencies
      run: dotnet restore AppInfraCdkV1.sln
    
    - name: Build
      run: dotnet build AppInfraCdkV1.sln --no-restore --configuration Release
    
    - name: Run tests
      run: dotnet test AppInfraCdkV1.sln --no-build --configuration Release --verbosity normal
    
    - name: CDK Diff for DATA Stack
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üîç Checking production changes for ${{ matrix.app }} DATA stack..."
        export CDK_STACK_TYPE=DATA
        cdk diff --app="dotnet run -- --app=${{ matrix.app }} --environment=${{ env.CDK_ENVIRONMENT }}"
    
    - name: CDK Deploy DATA Stack to Production
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üöÄ Deploying ${{ matrix.app }} DATA stack to PRODUCTION environment..."
        echo "‚ö†Ô∏è  This is a PRODUCTION deployment!"
        export CDK_STACK_TYPE=DATA
        cdk deploy --app="dotnet run -- --app=${{ matrix.app }} --environment=${{ env.CDK_ENVIRONMENT }}" \
                  --require-approval never \
                  --outputs-file ${{ matrix.app }}-DATA-outputs.json
        echo "‚úÖ DATA stack deployment completed successfully!"
    
    - name: Display Production DATA Resources
      run: |
        cd AppInfraCdkV1.Deploy
        if [ -f ${{ matrix.app }}-DATA-outputs.json ]; then
          echo "üìã Production resources created/updated for DATA stack:"
          cat ${{ matrix.app }}-DATA-outputs.json | jq -r 'to_entries[] | "üè≠ \(.key): \(.value)"' || cat ${{ matrix.app }}-DATA-outputs.json
        fi
    
    - name: Upload DATA deployment outputs
      uses: actions/upload-artifact@v4
      with:
        name: deployment-outputs-${{ matrix.app }}-DATA-prod
        path: AppInfraCdkV1.Deploy/${{ matrix.app }}-DATA-outputs.json

  # Lake Formation deployment - Storage Stack
  deploy-lakeformation-storage-prod:
    needs: [validate-input, validate-naming, deploy-data-prod]
    if: always() && (needs.validate-input.result == 'success' || github.event_name == 'push') && needs.validate-naming.result == 'success' && needs.deploy-data-prod.result == 'success'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Setup Node.js (for CDK CLI)
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install CDK CLI
      run: npm install -g aws-cdk
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/prod-tfv2-role-ue2-github-actions
        role-session-name: GitHubActions-Deploy-${{ github.run_id }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Restore dependencies
      run: dotnet restore AppInfraCdkV1.sln
    
    - name: Build
      run: dotnet build AppInfraCdkV1.sln --no-restore --configuration Release
    
    - name: Run tests
      run: dotnet test AppInfraCdkV1.sln --no-build --configuration Release --verbosity normal
    
    - name: List available Lake Formation stacks
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üìã Available Lake Formation stacks for production:"
        cdk list --app="dotnet run -- --app=LakeFormation --environment=${{ env.CDK_ENVIRONMENT }}"
    
    - name: CDK Diff for Lake Formation Storage Stack
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üîç Checking production changes for Lake Formation Storage stack..."
        cdk diff prod-lf-storage-ue2 --app="dotnet run -- --app=LakeFormation --environment=${{ env.CDK_ENVIRONMENT }}" || true
    
    - name: Deploy Lake Formation Storage Stack to Production
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üöÄ Deploying Lake Formation Storage stack to PRODUCTION environment..."
        echo "‚ö†Ô∏è  This is a PRODUCTION deployment!"
        cdk deploy prod-lf-storage-ue2 --app="dotnet run -- --app=LakeFormation --environment=${{ env.CDK_ENVIRONMENT }}" \
                  --require-approval never \
                  --outputs-file lf-storage-outputs.json
        echo "‚úÖ Lake Formation Storage stack deployment completed!"
    
    - name: Upload storage outputs
      uses: actions/upload-artifact@v4
      with:
        name: lf-storage-outputs-prod
        path: AppInfraCdkV1.Deploy/lf-storage-outputs.json

  # Lake Formation deployment - Setup Stack
  deploy-lakeformation-setup-prod:
    needs: deploy-lakeformation-storage-prod
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Setup Node.js (for CDK CLI)
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install CDK CLI
      run: npm install -g aws-cdk
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/prod-tfv2-role-ue2-github-actions
        role-session-name: GitHubActions-Deploy-${{ github.run_id }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Restore dependencies
      run: dotnet restore AppInfraCdkV1.sln
    
    - name: Build
      run: dotnet build AppInfraCdkV1.sln --no-restore --configuration Release
    
    - name: CDK Diff for Lake Formation Setup Stack
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üîç Checking production changes for Lake Formation Setup stack..."
        cdk diff prod-lf-setup-ue2 --app="dotnet run -- --app=LakeFormation --environment=${{ env.CDK_ENVIRONMENT }}" || true
    
    - name: Deploy Lake Formation Setup Stack to Production
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üöÄ Deploying Lake Formation Setup stack to PRODUCTION environment..."
        cdk deploy prod-lf-setup-ue2 --app="dotnet run -- --app=LakeFormation --environment=${{ env.CDK_ENVIRONMENT }}" \
                  --require-approval never \
                  --outputs-file lf-setup-outputs.json
        echo "‚úÖ Lake Formation Setup stack deployment completed!"
    
    - name: Upload setup outputs
      uses: actions/upload-artifact@v4
      with:
        name: lf-setup-outputs-prod
        path: AppInfraCdkV1.Deploy/lf-setup-outputs.json

  # Lake Formation deployment - Permissions Stack
  deploy-lakeformation-permissions-prod:
    needs: deploy-lakeformation-setup-prod
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Setup Node.js (for CDK CLI)
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install CDK CLI
      run: npm install -g aws-cdk
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/prod-tfv2-role-ue2-github-actions
        role-session-name: GitHubActions-Deploy-${{ github.run_id }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Restore dependencies
      run: dotnet restore AppInfraCdkV1.sln
    
    - name: Build
      run: dotnet build AppInfraCdkV1.sln --no-restore --configuration Release
    
    - name: CDK Diff for Lake Formation Permissions Stack
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üîç Checking production changes for Lake Formation Permissions stack..."
        cdk diff prod-lf-permissions-ue2 --app="dotnet run -- --app=LakeFormation --environment=${{ env.CDK_ENVIRONMENT }}" || true
    
    - name: Deploy Lake Formation Permissions Stack to Production
      run: |
        cd AppInfraCdkV1.Deploy
        echo "üöÄ Deploying Lake Formation Permissions stack to PRODUCTION environment..."
        cdk deploy prod-lf-permissions-ue2 --app="dotnet run -- --app=LakeFormation --environment=${{ env.CDK_ENVIRONMENT }}" \
                  --require-approval never \
                  --outputs-file lf-permissions-outputs.json
        echo "‚úÖ Lake Formation Permissions stack deployment completed!"
    
    - name: Upload permissions outputs
      uses: actions/upload-artifact@v4
      with:
        name: lf-permissions-outputs-prod
        path: AppInfraCdkV1.Deploy/lf-permissions-outputs.json