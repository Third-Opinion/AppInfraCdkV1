name: Deploy InternalApps to Development

on:
  push:
    branches:
      - develop
    paths:
      - 'AppInfraCdkV1.InternalApps/**'
      - '.github/workflows/deploy-internal-apps-dev.yml'
  workflow_dispatch:
    inputs:
      stack:
        description: 'Stack to deploy (leave empty for all)'
        required: false
        type: choice
        options:
          - ''
          - 'ScimSync'

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-2
  ENVIRONMENT: Development
  AWS_ACCOUNT_ID: 615299752206

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      stacks: ${{ steps.detect.outputs.stacks }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Detect stacks to deploy
        id: detect
        run: |
          if [ "${{ github.event.inputs.stack }}" != "" ]; then
            echo "stacks=[\"${{ github.event.inputs.stack }}\"]" >> $GITHUB_OUTPUT
          else
            # For now, only ScimSync is in InternalApps
            echo "stacks=[\"ScimSync\"]" >> $GITHUB_OUTPUT
          fi

      - name: Build solution
        run: |
          dotnet restore
          dotnet build --configuration Release --no-restore

      - name: Run tests
        run: |
          dotnet test --configuration Release --no-build --verbosity normal \
            --filter "Category!=Integration"

  deploy:
    needs: validate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        stack: ${{ fromJson(needs.validate.outputs.stacks) }}
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install AWS CDK
        run: npm install -g aws-cdk

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/dev-tfv2-role-ue2-github-actions
          role-session-name: github-actions-internal-apps-dev
          aws-region: ${{ env.AWS_REGION }}

      - name: Build project
        run: |
          dotnet restore
          dotnet build --configuration Release --no-restore

      - name: Synthesize CDK app
        working-directory: ./AppInfraCdkV1.Deploy
        run: |
          dotnet run -- --app=${{ matrix.stack }} --environment=${{ env.ENVIRONMENT }}

      - name: Deploy ${{ matrix.stack }} stack
        working-directory: ./AppInfraCdkV1.Deploy
        run: |
          # Get stack name based on environment and app
          STACK_PREFIX=$(echo "${{ env.ENVIRONMENT }}" | tr '[:upper:]' '[:lower:]' | cut -c1-3)
          APP_CODE=$(echo "${{ matrix.stack }}" | tr '[:upper:]' '[:lower:]' | sed 's/scimsync/scim/')
          STACK_NAME="${STACK_PREFIX}-${APP_CODE}-sync-ue2"
          
          echo "Deploying stack: $STACK_NAME"
          
          cdk deploy $STACK_NAME \
            --app "dotnet run -- --app=${{ matrix.stack }} --environment=${{ env.ENVIRONMENT }}" \
            --require-approval never \
            --outputs-file outputs.json

      - name: Upload stack outputs
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.stack }}-outputs
          path: ./AppInfraCdkV1.Deploy/outputs.json

  notify:
    needs: [validate, deploy]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ InternalApps deployment to Development succeeded"
          else
            echo "❌ InternalApps deployment to Development failed"
          fi