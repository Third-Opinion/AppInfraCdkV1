# Task ID: 6
# Title: Update IAM policies and roles for CDK deployment with proper permissions
# Status: pending
# Dependencies: 1, 4
# Priority: medium
# Description: Update the IAM policy dev-g-policy-g-gh-cdk-deploy to allow updating policies and roles it created, rename the GitHub Actions role to dev-cdk-role-ue2-github-actions, add 'cdk' to the application enum, and remove CDKDeployPolicy in favor of dev-g-policy-g-gh-cdk-deploy.
# Details:
1. Update IAM Policy dev-g-policy-g-gh-cdk-deploy:
   - Use AWS CLI with to-dev-admin profile to retrieve current policy version: aws iam get-policy-version --policy-arn arn:aws:iam::615299752206:policy/dev-g-policy-g-gh-cdk-deploy --version-id <current-version>
   - Add new permissions to allow updating IAM policies and roles with resource constraints:
     * iam:UpdateAssumeRolePolicy with resource constraint to roles created by this policy
     * iam:PutRolePolicy, iam:DeleteRolePolicy for inline policies
     * iam:AttachRolePolicy, iam:DetachRolePolicy for managed policies
     * iam:CreatePolicyVersion, iam:DeletePolicyVersion for policy updates
   - Include condition to restrict updates only to resources tagged with Creator: CDK or matching naming pattern dev-cdk-*
   - Create new policy version: aws iam create-policy-version --policy-arn <arn> --policy-document file://updated-policy.json --set-as-default

2. Rename IAM Role:
   - Document current role configuration: aws iam get-role --role-name dev-tfv2-role-ue2-github-actions
   - Export trust policy and attached policies
   - Create new role dev-cdk-role-ue2-github-actions with same trust policy
   - Attach dev-g-policy-g-gh-cdk-deploy to the new role
   - Update GitHub Actions secrets/variables to use new role ARN
   - Test new role permissions before deleting old role

3. Application Enum Update:
   - Locate application enum definition in codebase (likely in constants or config file)
   - Add 'cdk' as a valid application value
   - Update any validation logic that uses this enum
   - Ensure CDK stacks use the new 'cdk' application tag

4. Remove CDKDeployPolicy:
   - Search codebase for references to CDKDeployPolicy
   - Replace all references with dev-g-policy-g-gh-cdk-deploy
   - Update any CloudFormation/CDK templates that create or attach CDKDeployPolicy
   - Delete the CDKDeployPolicy from AWS account if it exists as a managed policy

5. Update GitHub Actions Workflow:
   - Modify .github/workflows files to use new role name
   - Update any environment variables referencing the old role
   - Ensure OIDC trust relationship is maintained with new role

# Test Strategy:
1. Validate IAM policy updates:
   - Use aws iam simulate-principal-policy to test new permissions work correctly
   - Attempt to update a test IAM role/policy created by CDK to verify constraints
   - Confirm updates to resources NOT created by CDK are denied

2. Test role rename:
   - Trigger a GitHub Actions workflow using the new role
   - Verify CDK deployment succeeds with new role permissions
   - Confirm old role name no longer works

3. Verify application enum:
   - Deploy a test CDK stack with 'cdk' application tag
   - Check AWS resources are properly tagged with Application: cdk
   - Validate any application-specific logic handles 'cdk' value

4. Confirm CDKDeployPolicy removal:
   - Search AWS account for any remaining references to CDKDeployPolicy
   - Verify all CDK deployments work without CDKDeployPolicy
   - Check CloudFormation stacks no longer reference the old policy

5. End-to-end deployment test:
   - Run complete CDK deployment pipeline with all changes
   - Verify GitHub Actions can assume new role and deploy successfully
   - Test updating an existing CDK-deployed IAM resource
