{
  "master": {
    "tasks": [
      {
        "id": 24,
        "title": "Create Google Workspace Groups for Lake Formation",
        "description": "Create new Google Workspace security groups for Lake Formation data access control",
        "status": "done",
        "dependencies": [],
        "priority": "high",
        "details": "Manually create the following groups in Google Workspace: data-analysts-dev@thirdopinion.io, data-analysts-phi@thirdopinion.io, data-engineers-phi@thirdopinion.io. Assign initial users to appropriate groups and wait for Identity Center sync (up to 40 minutes).",
        "testStrategy": "Verify groups appear in AWS Identity Center console and run prerequisites check script to confirm sync completion",
        "subtasks": [
          {
            "id": 1,
            "title": "Create data-analysts-dev@thirdopinion.io group",
            "description": "Create the development data analysts Google Workspace security group for non-PHI data access",
            "status": "done",
            "dependencies": [],
            "details": "Log into Google Workspace Admin Console, navigate to Groups section, create new group with email data-analysts-dev@thirdopinion.io, set appropriate description indicating this group is for development environment data analysts accessing non-PHI data in Lake Formation",
            "testStrategy": "Verify group appears in Google Workspace directory and can be searched by name"
          },
          {
            "id": 2,
            "title": "Create data-analysts-phi@thirdopinion.io group",
            "description": "Create the PHI data analysts Google Workspace security group for protected health information access",
            "status": "done",
            "dependencies": [],
            "details": "In Google Workspace Admin Console, create new group with email data-analysts-phi@thirdopinion.io, set description indicating this group provides access to PHI data in Lake Formation, configure appropriate security settings for sensitive data access",
            "testStrategy": "Confirm group is created and accessible in Google Workspace with proper PHI access designation"
          },
          {
            "id": 3,
            "title": "Create data-engineers-phi@thirdopinion.io group and assign initial users",
            "description": "Create the data engineers PHI Google Workspace security group and populate with initial team members",
            "status": "done",
            "dependencies": [
              1,
              2
            ],
            "details": "Create new group with email data-engineers-phi@thirdopinion.io, set description for data engineering team access to PHI data in Lake Formation resources, add initial data engineering team members to the group based on current team roster",
            "testStrategy": "Confirm group creation and verify initial users are properly assigned and can see group membership"
          },
          {
            "id": 4,
            "title": "Verify Identity Center synchronization completion",
            "description": "Monitor and confirm that all created groups have synchronized to AWS Identity Center",
            "status": "done",
            "dependencies": [
              3
            ],
            "details": "Wait for AWS Identity Center sync (up to 40 minutes), monitor AWS Identity Center console to verify all three groups (data-analysts-dev, data-analysts-phi, data-engineers-phi) appear in the available groups list, run any prerequisites check script if available to confirm sync completion",
            "testStrategy": "Check AWS Identity Center console shows all groups, verify group membership is reflected, run prerequisites validation script to confirm readiness for Lake Formation deployment"
          }
        ]
      },
      {
        "id": 25,
        "title": "Setup Lake Formation Identity Center Integration Scripts",
        "description": "Create and configure bash scripts for one-time Lake Formation Identity Center integration",
        "details": "Create check-prerequisites.sh script to validate Identity Center instance ARN and existing groups. Create setup-lakeformation-identity-center.sh script to enable Identity Center integration using aws lakeformation create-lake-formation-identity-center-configuration command for both dev and prod accounts.",
        "testStrategy": "Execute scripts in both dev and prod environments, verify integration status in AWS console, confirm no errors in script execution",
        "priority": "high",
        "dependencies": [
          24
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create prerequisites validation script",
            "description": "Create check-prerequisites.sh script to validate Identity Center instance ARN and existing groups before integration",
            "dependencies": [],
            "details": "Create bash script that checks for valid Identity Center instance ARN using aws sso-admin list-instances, validates required groups exist in Identity Center, verifies current user has necessary permissions for Lake Formation operations, and outputs clear validation results with error messages for missing prerequisites.\n<info added on 2025-08-13T00:35:47.268Z>\nScripts have been moved to AppInfraCdkV1.Tools/scripts/lake-formation/ directory for better project organization. The scripts are now part of the Tools project and are included in the build output.\n</info added on 2025-08-13T00:35:47.268Z>",
            "status": "done",
            "testStrategy": "Execute script in both dev and prod environments, verify it correctly identifies missing prerequisites and passes when all requirements are met"
          },
          {
            "id": 2,
            "title": "Create Lake Formation Identity Center configuration script for dev environment",
            "description": "Create setup-lakeformation-identity-center.sh script targeting development account (615299752206)",
            "dependencies": [
              "25.1"
            ],
            "details": "Create bash script using to-dev-admin profile that calls aws lakeformation create-lake-formation-identity-center-configuration with the validated Identity Center instance ARN, includes error handling and rollback capabilities, logs all operations for audit purposes, and verifies successful integration status.",
            "status": "done",
            "testStrategy": "Execute script in dev environment, verify Lake Formation Identity Center integration appears in AWS console, confirm no errors during execution"
          },
          {
            "id": 3,
            "title": "Create Lake Formation Identity Center configuration script for prod environment",
            "description": "Create production version of setup script targeting production account (442042533707)",
            "dependencies": [
              "25.2"
            ],
            "details": "Adapt the dev script for to-prd-admin profile with production account-specific configurations, include additional confirmation prompts for production safety, implement comprehensive logging and backup procedures before making changes, and add validation steps specific to production environment constraints.",
            "status": "done",
            "testStrategy": "Execute script in prod environment with proper approvals, verify Lake Formation Identity Center integration in production console, validate all safety checks function correctly"
          },
          {
            "id": 4,
            "title": "Implement integration status verification functionality",
            "description": "Add verification functions to confirm Lake Formation Identity Center integration is properly configured",
            "dependencies": [
              "25.2",
              "25.3"
            ],
            "details": "Create bash functions that use aws lakeformation describe-lake-formation-identity-center-configuration to verify integration status, check that Identity Center groups are properly mapped, validate permissions inheritance is working, and generate status reports showing current configuration state.",
            "status": "done",
            "testStrategy": "Run verification functions after integration setup, confirm accurate status reporting, verify all expected groups and permissions are detected"
          },
          {
            "id": 5,
            "title": "Create comprehensive integration test suite",
            "description": "Develop test scripts to validate end-to-end Lake Formation Identity Center integration functionality",
            "dependencies": [
              "25.4"
            ],
            "details": "Create test suite that validates prerequisite checks work correctly, tests successful integration setup in both environments, verifies integration status reporting accuracy, includes rollback testing procedures, and generates comprehensive test reports for compliance documentation.",
            "status": "done",
            "testStrategy": "Execute full test suite in both dev and prod environments, verify all integration components function correctly, confirm rollback procedures work as expected"
          }
        ]
      },
      {
        "id": 26,
        "title": "Create CDK Project Structure for Lake Formation",
        "description": "Initialize new C# CDK project structure for Lake Formation implementation",
        "details": "Create new LakeFormation app at same level as TrialFinderV2. Setup project structure with src/ThirdOpinionDataLake.Core directory, add EnvironmentConfig.cs with group to role mappings, create cdk.json configuration file, and initialize C# project files with proper CDK dependencies.",
        "testStrategy": "Verify project compiles successfully with dotnet build, confirm CDK can synthesize templates without errors",
        "priority": "medium",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 27,
        "title": "Implement Data Lake Storage Construct",
        "description": "Create C# CDK construct for S3 buckets with proper encryption and lifecycle policies",
        "details": "Implement DataLakeStorageConstruct.cs with three buckets: raw data (thirdopinion-raw-{env}-{region}) with lifecycle rules, curated data (thirdopinion-curated-{env}-{region}) with versioning, and sensitive/PHI bucket for production only with KMS encryption and access logging. Configure appropriate block public access and removal policies.",
        "testStrategy": "Deploy construct to dev environment, verify all three buckets created with correct configurations, test lifecycle rules and encryption settings",
        "priority": "medium",
        "dependencies": [
          26
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 28,
        "title": "Implement Lake Formation Setup Construct",
        "description": "Create CDK construct for Lake Formation configuration including admin roles, data lake settings, and resource registration",
        "details": "Implement LakeFormationSetupConstruct.cs with Lake Formation admin role creation, data lake settings configuration with trusted resource owners, S3 location registration for all buckets, Glue database creation (thirdopinion_{environment}), and LF-Tags creation for Environment, DataClassification, and PHI tagging.",
        "testStrategy": "Verify admin role created with correct permissions, confirm data lake settings applied, test S3 locations registered in Lake Formation, validate Glue database accessible",
        "priority": "high",
        "dependencies": [
          27
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 29,
        "title": "Implement Permissions Management Construct",
        "description": "Create CDK construct for environment-specific Lake Formation permissions based on Identity Center groups",
        "details": "Implement PermissionsConstruct.cs with separate permission logic for prod and dev environments. Production: data-analysts-phi gets SELECT/DESCRIBE on all tables, data-engineers get CREATE_TABLE/ALTER/DROP/DESCRIBE, prod-access gets NO data permissions. Development: broader ALL permissions for data-analysts-dev and data-engineers groups.",
        "testStrategy": "Deploy to both environments, verify correct permissions applied per group, test that DevOps team cannot access data in production, confirm PHI access restrictions work",
        "priority": "high",
        "dependencies": [
          28
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 30,
        "title": "Create Master Deployment Script",
        "description": "Develop comprehensive bash deployment script for Lake Formation with multiple deployment actions",
        "details": "Create deploy-data-lake.sh script supporting actions: setup-identity-center, deploy, grant-permissions, test, full, and destroy. Script should handle environment loading, AWS account detection, CDK deployment with proper context variables, and orchestrate all deployment phases with proper error handling.",
        "testStrategy": "Test all deployment actions in dev environment, verify full deployment pipeline works end-to-end, confirm destroy action properly cleans up resources",
        "priority": "medium",
        "dependencies": [
          29
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 31,
        "title": "Create Permissions Management Scripts",
        "description": "Develop CDK constructs and infrastructure-as-code for Lake Formation permissions management and table tagging",
        "status": "done",
        "dependencies": [
          30
        ],
        "priority": "medium",
        "details": "Create CDK constructs for LF-Tag creation, Glue table creation with comprehensive tagging (PHI, tenant ID, data type, sensitivity), and Lake Formation permission grants. Integrate with existing Lake Formation stack structure and maintain environment-specific configurations through CDK context and props. Build infrastructure-as-code approach that handles table-level permission granting based on PHI status, tenant-based querying capabilities, and environment-specific permission patterns.",
        "testStrategy": "Deploy CDK constructs to dev environment, verify correct tags applied including tenant ID tags through CDK, test PHI vs non-PHI permission differences via infrastructure deployment, validate environment-specific access patterns through CDK context, and confirm tenant-based query filtering works through deployed infrastructure",
        "subtasks": [
          {
            "id": 1,
            "title": "Create LF-Tag management CDK construct",
            "description": "Develop CDK construct to create and manage Lake Formation tags for data classification (PHI, sensitivity levels, data types, tenant IDs)",
            "status": "done",
            "dependencies": [],
            "details": "Create CDK construct that handles LF-Tag creation for PHI classification (true/false), sensitivity levels (public, internal, confidential, restricted), data types (clinical, research, operational), and tenant IDs for tenant-based querying. Use CDK context and props for environment-specific tag values with proper error handling for existing tags. Integrate with existing Lake Formation stack structure.",
            "testStrategy": "Deploy construct to dev environment, verify tags appear in Lake Formation console through CDK deployment, validate tag values match configuration including tenant ID tags"
          },
          {
            "id": 2,
            "title": "Develop table permission granting CDK construct",
            "description": "Create CDK construct to grant table-level permissions based on PHI status, group membership, and tenant access patterns",
            "status": "done",
            "dependencies": [
              1
            ],
            "details": "Build CDK construct that reads group configurations and applies appropriate permissions using Lake Formation permissions resources. Handle table-level permissions for PHI vs non-PHI access patterns while supporting tenant-based data access through LF-Tags. Integrate with existing CDK stack structure and use props for configuration.",
            "testStrategy": "Deploy construct with sample table configurations, verify group access matches expected patterns using AWS CLI describe commands, confirm permissions are properly applied through CDK"
          },
          {
            "id": 3,
            "title": "Create sample table setup CDK construct",
            "description": "Develop CDK construct to create sample Glue tables with various PHI classifications and tenant ID tags for testing",
            "status": "done",
            "dependencies": [
              1
            ],
            "details": "Create CDK construct that generates sample tables in the healthlake_analytics database with different PHI tags and tenant ID tags applied. Include tables for different tenant partitions and data sensitivity levels to test permission scenarios and tenant-based querying capabilities. Use CDK Glue table resources with proper tagging.",
            "testStrategy": "Deploy construct and verify tables are created with correct LF-Tags applied including tenant IDs through CDK, confirm tables appear in Glue catalog with proper metadata for tenant filtering"
          },
          {
            "id": 4,
            "title": "Implement environment-specific permission patterns in CDK",
            "description": "Create CDK logic to handle different permission patterns between dev and prod environments with tenant considerations",
            "status": "done",
            "dependencies": [
              2
            ],
            "details": "Extend CDK constructs to handle environment-specific access patterns through CDK context and props. Dev environment allows broader access while prod restricts PHI access to specific groups. Include validation for group membership, tenant access patterns, and cross-environment permission differences using CDK conditionals.",
            "testStrategy": "Deploy CDK constructs in both dev and prod configurations, verify dev allows non-PHI access broadly while prod restricts appropriately, confirm tenant-based access works in both environments"
          },
          {
            "id": 5,
            "title": "Create PHI access control validation through CDK deployment",
            "description": "Develop CDK-based validation to verify PHI access controls and tenant-based querying are properly implemented",
            "status": "done",
            "dependencies": [
              2,
              3,
              4
            ],
            "details": "Create CDK custom resources or Lambda functions that validate PHI access patterns and tenant-based querying by testing table access with different group credentials. Verify that non-PHI groups cannot access PHI-tagged tables, that PHI groups have appropriate access levels, and that tenant-based filtering works correctly through infrastructure deployment.",
            "testStrategy": "Deploy validation infrastructure against sample tables with various PHI and tenant tags, confirm access denials for non-PHI groups, successful access for PHI groups, and proper tenant-based query filtering through CDK-deployed validation"
          },
          {
            "id": 6,
            "title": "Implement tenant ID tag management CDK construct for comprehensive data classification",
            "description": "Extend CDK LF-Tag management to include tenant ID tags for enabling tenant-based data querying and filtering",
            "status": "done",
            "dependencies": [
              1
            ],
            "details": "Enhance existing CDK LF-Tag management construct to create and apply tenant ID tags alongside PHI, sensitivity, and data type tags. Ensure tenant tags support query filtering capabilities while maintaining role-based PHI access controls. Include CDK logic for mapping tenant identifiers to appropriate tag values through props and context.",
            "testStrategy": "Deploy CDK construct and verify tenant ID tags are created and applied correctly, test tenant-based query filtering through Lake Formation, confirm tenant tags work in conjunction with existing PHI and sensitivity tags"
          }
        ]
      },
      {
        "id": 32,
        "title": "Implement Permission Validation Scripts",
        "description": "Create automated testing scripts to validate Lake Formation permissions are correctly applied",
        "details": "Create test-permissions script (bash or C# for consistency) that validates each group has correct Lake Formation permissions, tests that DevOps groups cannot access data tables, verifies PHI access controls work properly, and generates permission validation reports for compliance.",
        "testStrategy": "Execute validation scripts against deployed infrastructure, confirm all test cases pass, verify DevOps access denial works, validate PHI protection mechanisms",
        "priority": "medium",
        "dependencies": [
          31
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 33,
        "title": "Integrate with Existing GitHub Actions Workflow",
        "description": "Add Lake Formation deployment to existing GitHub Actions deployment pipeline",
        "details": "Create or modify existing GitHub Actions workflow to include Lake Formation deployment steps. Add workflow_dispatch trigger for manual deployments, configure AWS credentials using existing OIDC roles, integrate CDK deployment commands, and add permission configuration and validation steps. Ensure compatibility with existing deployment structure.",
        "testStrategy": "Test GitHub Actions workflow in dev environment first, verify OIDC authentication works, confirm deployment integrates with existing infrastructure, validate end-to-end deployment from GitHub",
        "priority": "high",
        "dependencies": [
          32
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 34,
        "title": "Configure slashdevops/idp-scim-sync for Google Workspace to IAM Identity Center Synchronization",
        "description": "Set up and configure the SCIM synchronization tool to automatically sync users and groups from Google Workspace to AWS IAM Identity Center, ensuring Lake Formation groups are properly maintained. This includes comprehensive CDK C# deployment, configuration management, and operational procedures for the AppInfraCdkV1 infrastructure.",
        "status": "done",
        "dependencies": [
          24,
          25
        ],
        "priority": "medium",
        "details": "**IDP SCIM Sync Integration Product Requirements Document**\n\n**Background:** Need for automated identity synchronization between Google Workspace and AWS IAM Identity Center to eliminate manual user and group management overhead while ensuring Lake Formation access control groups remain synchronized.\n\n**Problem Statement:** Manual management of identity synchronization creates operational overhead, increases risk of access control inconsistencies, and delays user provisioning/deprovisioning processes.\n\n**Goals and Objectives:** Implement automated, reliable, and secure identity synchronization that maintains data consistency, provides operational controls, and integrates seamlessly with existing AppInfraCdkV1 infrastructure.\n\n**Functional Requirements:**\n- REQ-1.1.1: Automated user synchronization from Google Workspace to AWS IAM Identity Center\n- REQ-1.1.2: Automated group synchronization with Lake Formation group preservation\n- REQ-1.1.3: Real-time provisioning and deprovisioning capabilities\n- REQ-1.2.1: Environment-specific configuration management (dev/staging/prod)\n- REQ-1.2.2: CDK C# integration within AppInfraCdkV1 project\n- REQ-1.2.3: Context variable configuration in cdk.json\n- REQ-1.3.1: Three-tier SCIM disable methodology (EventBridge, group filters, Identity Center)\n- REQ-1.3.2: Environment variable control system for SCIM functionality\n- REQ-1.3.3: Reversible operational procedures with rollback capabilities\n- REQ-1.4.1: NuGet package integration for AWS CDK libraries\n- REQ-1.4.2: ScimSyncStack implementation with proper resource management\n\n**Non-Functional Requirements:**\n- REQ-2.1.1: Secure service account configuration with minimal required permissions\n- REQ-2.1.2: IAM roles with least privilege access for Identity Center SCIM\n- REQ-2.1.3: Encrypted credential storage and transmission\n- REQ-2.2.1: Sync frequency optimization to balance consistency and performance\n- REQ-2.2.2: Efficient resource utilization across environments\n- REQ-2.3.1: Fault tolerance with automatic retry mechanisms\n- REQ-2.3.2: Data consistency validation and integrity checks\n- REQ-2.3.3: Disaster recovery and failover procedures\n- REQ-2.4.1: Comprehensive monitoring with CloudWatch integration\n- REQ-2.4.2: Alerting for sync failures and operational issues\n- REQ-2.4.3: Audit logging for all synchronization activities\n\n**Environment-Specific Requirements:**\n- REQ-3.1.1: Development environment with reduced sync frequency for testing\n- REQ-3.1.2: Staging environment mirroring production configuration\n- REQ-3.3.1: Production environment with high availability and monitoring\n- REQ-3.3.2: Production backup and recovery procedures\n\n**Integration Requirements:**\n- REQ-4.1.1: Google Workspace Directory API integration with service account\n- REQ-4.1.2: Group filtering and mapping configuration\n- REQ-4.2.1: AWS IAM Identity Center SCIM endpoint configuration\n- REQ-4.2.2: Permission set and account assignment management\n- REQ-4.3.1: Seamless integration with existing AppInfraCdkV1 stack architecture\n- REQ-4.3.2: Resource naming consistency with project conventions\n\n**Deployment and Maintenance Requirements:**\n- REQ-5.1: Automated deployment through CDK pipelines\n- REQ-5.2: Comprehensive resource documentation per environment\n- REQ-5.3: Operational best practices and safety procedures\n- REQ-5.4: Troubleshooting and management procedures\n- REQ-5.5: Cleanup and re-enabling workflows\n\n**Success Criteria:** Successful automated synchronization with <5 minute sync latency, 99.9% sync reliability, zero manual intervention for routine operations, and complete operational control through documented procedures.\n\n**Dependencies:** External (Google Workspace Directory API, AWS IAM Identity Center), Internal (AppInfraCdkV1 infrastructure, Lake Formation groups), Technical (slashdevops/idp-scim-sync compatibility, CDK C# framework).\n\n**Assumptions:** Stable infrastructure foundation, API compatibility maintenance, and proper service account provisioning capabilities.",
        "testStrategy": "Verify CDK deployment succeeds across all environments. Test initial SCIM sync and validate all Lake Formation groups sync correctly. Verify each of the three disable methods work properly. Test environment variable controls and confirm AWS resources are created as expected. Validate troubleshooting procedures and test re-enabling synchronization. Ensure safe operational sequences prevent data inconsistencies. Validate all functional and non-functional requirements are met per PRD specifications.",
        "subtasks": [
          {
            "id": 1,
            "title": "Add CDK C# SCIM Sync Stack to AppInfraCdkV1",
            "description": "Create ScimSyncStack.cs and integrate with existing CDK infrastructure",
            "status": "done",
            "dependencies": [],
            "details": "Add required NuGet packages (AWS CDK libraries for Lambda, EventBridge, IAM, SSM). Create ScimSyncStack.cs with Lambda function for SCIM sync, EventBridge scheduled rule, IAM roles and policies for Google Workspace and AWS Identity Center access. Update Program.cs to instantiate ScimSyncStack for each environment.",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Configure CDK Context Variables",
            "description": "Set up environment-specific configuration in cdk.json",
            "status": "done",
            "dependencies": [],
            "details": "Add SCIM-specific context variables including Google Workspace domain, service account credentials path, AWS Identity Center SCIM endpoint URLs, sync frequency settings, and group filters for each environment (dev/staging/prod).",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Implement Three SCIM Disable Methods",
            "description": "Create comprehensive SCIM disabling capabilities",
            "status": "done",
            "dependencies": [],
            "details": "Method 1: EventBridge rule disable/enable functionality. Method 2: Empty groups filter configuration to stop syncing specific groups. Method 3: Complete IAM Identity Center SCIM endpoint disabling. Each method should be reversible and include proper documentation.",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Configure Environment Variables Control System",
            "description": "Set up environment variables for SCIM functionality control",
            "status": "done",
            "dependencies": [],
            "details": "Create SSM Parameter Store parameters for SCIM_ENABLED, SYNC_FREQUENCY, GROUP_FILTERS, and DEBUG_MODE. Implement Lambda function logic to read these parameters and adjust behavior accordingly.",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Document AWS Resources Per Environment",
            "description": "Create comprehensive resource documentation",
            "status": "done",
            "dependencies": [],
            "details": "Document all AWS resources created by the SCIM stack including Lambda functions, IAM roles/policies, EventBridge rules, SSM parameters, and CloudWatch log groups for each environment. Include resource naming conventions and tagging strategies.",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Establish SCIM Best Practices and Safety Procedures",
            "description": "Create operational best practices documentation",
            "status": "done",
            "dependencies": [],
            "details": "Document recommended sequences for safely disabling SCIM without causing data inconsistencies. Include pre-disable checklists, rollback procedures, and validation steps. Create troubleshooting guide for common disable/enable scenarios.",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "Implement Troubleshooting and Management Procedures",
            "description": "Create comprehensive troubleshooting and stack management documentation",
            "status": "done",
            "dependencies": [],
            "details": "Document common SCIM issues and solutions, CDK stack management procedures, cleanup processes for removing SCIM infrastructure, and step-by-step re-enabling procedures. Include monitoring and alerting setup for SCIM operations.",
            "testStrategy": ""
          },
          {
            "id": 8,
            "title": "Deploy and Test Complete SCIM Solution",
            "description": "End-to-end deployment and validation of SCIM infrastructure",
            "status": "done",
            "dependencies": [],
            "details": "Deploy SCIM stack to all environments, validate Lake Formation group synchronization, test all disable/enable methods, verify environment variable controls, and confirm operational procedures work as documented.",
            "testStrategy": ""
          },
          {
            "id": 9,
            "title": "Add Required NuGet Packages for SCIM Sync Dependencies",
            "description": "Install and configure the necessary AWS CDK NuGet packages required for SCIM synchronization infrastructure including Lambda, EventBridge, IAM, SSM, and CloudWatch components",
            "dependencies": [],
            "details": "Add NuGet package references to AppInfraCdkV1.csproj: Amazon.CDK.AWS.Lambda, Amazon.CDK.AWS.Events, Amazon.CDK.AWS.Events.Targets, Amazon.CDK.AWS.IAM, Amazon.CDK.AWS.SSM, Amazon.CDK.AWS.Logs, Amazon.CDK.AWS.CloudWatch. Update package versions to match existing CDK version in project. Verify package compatibility and resolve any version conflicts.",
            "status": "done",
            "testStrategy": "Verify project builds successfully after adding packages and no version conflicts exist"
          },
          {
            "id": 10,
            "title": "Create ScimSyncStack CDK Infrastructure",
            "description": "Implement ScimSyncStack.cs with complete AWS infrastructure for SCIM synchronization including Lambda function, EventBridge scheduling, IAM roles, and parameter storage",
            "dependencies": [
              "34.9"
            ],
            "details": "Create ScimSyncStack.cs inheriting from Stack. Implement Lambda function using slashdevops/idp-scim-sync container image. Create EventBridge scheduled rule for sync frequency (configurable per environment). Define IAM roles with least privilege access for Google Workspace Directory API and AWS Identity Center SCIM. Create SSM parameters for configuration storage including Google service account key, Identity Center SCIM endpoint, and group filters. Add CloudWatch log group for monitoring.",
            "status": "done",
            "testStrategy": "Deploy stack to dev environment and verify all resources created correctly"
          },
          {
            "id": 11,
            "title": "Integrate SCIM Stack with CDK Program and Context Variables",
            "description": "Update Program.cs to instantiate ScimSyncStack for each environment and configure context variables in cdk.json for environment-specific SCIM settings",
            "dependencies": [
              "34.10"
            ],
            "details": "Modify Program.cs to create ScimSyncStack instance for each environment (dev/prod). Add context variables to cdk.json for SCIM configuration: sync frequency per environment, Google Workspace domain, Identity Center instance ARN, group filtering rules, and enable/disable flags. Implement environment-specific parameter passing to ScimSyncStack constructor. Ensure proper stack naming conventions following project patterns.",
            "status": "done",
            "testStrategy": "Verify CDK synth generates correct templates for each environment with proper context variable substitution"
          },
          {
            "id": 12,
            "title": "Implement Three-Tier SCIM Disable Methodology",
            "description": "Create comprehensive disable mechanisms through EventBridge rule disabling, group filtering, and Identity Center configuration to provide multiple safety controls",
            "dependencies": [
              "34.11"
            ],
            "details": "Implement EventBridge rule state management to pause/resume sync scheduling. Create group filter parameter in SSM to exclude specific groups from sync. Add Identity Center SCIM endpoint enable/disable configuration. Create environment variables and CDK context parameters for each disable method. Implement CloudFormation stack update procedures to modify these settings. Document the hierarchical disable approach and recovery procedures.",
            "status": "done",
            "testStrategy": "Test each disable method independently and verify sync stops as expected. Validate re-enable procedures restore full functionality"
          },
          {
            "id": 13,
            "title": "Configure SCIM Sync Environment Variables and Operational Controls",
            "description": "Set up comprehensive environment variable configuration system and create operational procedures for managing SCIM synchronization across all environments",
            "dependencies": [
              "34.12"
            ],
            "details": "Create SSM parameter hierarchy for all SCIM configuration: Google Workspace service account credentials, Identity Center SCIM token and endpoint, group filtering rules, sync frequency settings, and feature flags. Implement environment-specific parameter naming conventions. Create operational scripts for common tasks: enabling/disabling sync, updating group filters, rotating credentials, and monitoring sync status. Document troubleshooting procedures and emergency response protocols.",
            "status": "done",
            "testStrategy": "Verify all environment variables properly configure SCIM sync behavior. Test operational procedures in dev environment and validate monitoring and alerting functionality"
          }
        ]
      },
      {
        "id": 35,
        "title": "Complete SCIM Lambda Implementation and Deployment",
        "description": "This task is no longer needed as the SCIM synchronization system will be removed directly without completing the implementation.",
        "status": "cancelled",
        "dependencies": [
          34
        ],
        "priority": "medium",
        "details": "Task cancelled - proceeding directly to removal of SCIM infrastructure as specified in task 36. The SCIM Lambda implementation will not be completed as the entire SCIM synchronization system is being removed from the project.",
        "testStrategy": "No testing required - task cancelled in favor of direct removal.",
        "subtasks": []
      },
      {
        "id": 36,
        "title": "Remove SCIM Synchronization Infrastructure and Code",
        "description": "Completely remove all SCIM-related code, CDK stacks, AWS resources, and configuration files from the project, including cleanup of deployed infrastructure.",
        "details": "This task involves comprehensive removal of the SCIM synchronization system: 1) Delete all deployed AWS CloudFormation stacks using CDK destroy commands for both dev and prod environments (dev-scim-sync-ue2, prod-scim-sync-ue2). 2) Remove the ScimSync CDK application code from AppInfraCdkV1.Apps directory including ScimSyncStack.cs, ScimSyncApp.cs, and related configuration files. 3) Delete SCIM-related Lambda function code from tools/AppInfraCdkV1.Tools.Common/docker-lambda/ directory. 4) Remove SCIM configuration scripts from tools/AppInfraCdkV1.Tools.Common/scripts/scim-sync/ directory. 5) Clean up any SCIM-related environment variables, secrets, or configuration references in deployment scripts. 6) Remove SCIM dependencies from project files, solution files, and CDK configuration. 7) Update deployment documentation to remove SCIM references. 8) Verify no orphaned AWS resources remain after stack deletion including Lambda functions, IAM roles, CloudWatch logs, and any associated resources.",
        "testStrategy": "Verify AWS CloudFormation stacks are completely deleted using AWS CLI stack describe commands. Confirm no SCIM-related code exists in the codebase using grep searches for 'scim', 'ScimSync', and related terms. Validate project builds successfully after code removal. Check AWS console to ensure no orphaned Lambda functions, IAM roles, or other SCIM-related resources remain. Run full deployment pipeline to confirm removal doesn't break existing functionality. Verify GitHub Actions workflows no longer reference SCIM components.",
        "status": "done",
        "dependencies": [
          35
        ],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 37,
        "title": "Update Lake Formation Stack to Implement Single-Tenant-per-HealthLake-Instance Architecture",
        "description": "Refactor Lake Formation infrastructure to support dedicated HealthLake instances per tenant with GUID-based tenant identification, removing multi-tenant complexity and implementing simplified single-tenant data import model.",
        "details": "This task involves major architectural changes to the Lake Formation implementation: 1) Modify LakeFormationSetupConstruct.cs to support single-tenant configuration with GUID-based tenant identification. 2) Update S3 bucket structure to organize data by tenant GUID rather than multi-tenant schemas. 3) Refactor Glue database creation to use tenant-specific naming convention (thirdopinion_{environment}_{tenantGuid}). 4) Update LF-Tags to include TenantId tag alongside existing Environment, DataClassification, and PHI tags. 5) Configure test HealthLake instances for dev and prod environments with dedicated tenant GUIDs. 6) Create sample PHI-marked data for prod test instance following healthcare data compliance requirements. 7) Update permission constructs to grant access based on tenant-specific resources rather than shared multi-tenant resources. 8) Modify data import processes to target single tenant per HealthLake instance. 9) Update environment configuration to map each HealthLake instance to a specific tenant GUID. 10) Remove any multi-tenant logic and shared resource dependencies from the CDK constructs.",
        "testStrategy": "Verify tenant-specific Glue databases are created with correct naming convention. Test that LF-Tags include TenantId and are properly applied to tenant-specific resources. Validate HealthLake instances are configured with dedicated tenant GUIDs in both dev and prod. Confirm sample PHI data is properly marked and accessible only through correct tenant context. Test data import process targets correct single tenant. Verify permission isolation between different tenant instances. Execute validation scripts to ensure no cross-tenant data access is possible. Test end-to-end data flow from HealthLake instance through Lake Formation to verify single-tenant architecture works correctly.",
        "status": "done",
        "dependencies": [
          28,
          26,
          30,
          32
        ],
        "priority": "medium",
        "subtasks": [
          {
            "id": 1,
            "title": "Update Configuration and Environment Models to Support Single-Tenant Architecture",
            "description": "Modify lakeformation-config.json and EnvironmentConfig.cs to remove multi-tenancy flags and add tenant GUID configuration for single-tenant-per-HealthLake-instance architecture",
            "dependencies": [],
            "details": "1. Update lakeformation-config.json to set enableMultiTenancy=false and enableMultiTenantStructure=false for both dev and prod environments. 2. Add dedicated tenantGuid fields for dev (test GUID) and prod (production tenant GUID) environments. 3. Update HealthLakeConfig class in EnvironmentConfig.cs to include TenantGuid property and remove multi-tenancy support. 4. Remove tenantClaimSystem property as it's no longer needed for single-tenant architecture. 5. Update DataLakeBucketConfig to replace TenantPartitionKey with specific tenant GUID configuration.",
            "status": "done",
            "testStrategy": "Verify configuration loads correctly with new single-tenant structure, confirm tenant GUIDs are properly set for each environment"
          },
          {
            "id": 2,
            "title": "Refactor Glue Database Creation for Single-Tenant Naming Convention",
            "description": "Update LakeFormationSetupStack.cs to create tenant-specific Glue databases using thirdopinion_{environment}_{tenantGuid} naming pattern",
            "dependencies": [
              "37.1"
            ],
            "details": "1. Modify CreateGlueDatabases() method in LakeFormationSetupStack.cs to use tenant-specific naming: thirdopinion_{environment}_{tenantGuid}. 2. Remove multi-tenant parameters from database configuration (remove multiTenant=true parameter). 3. Update S3 location URIs to use tenant-specific paths (s3://bucket/tenantGuid/raw/ instead of partitioned structure). 4. Simplify partition keys to remove tenantGuid partitioning since each database serves a single tenant. 5. Update database descriptions to reflect single-tenant usage.",
            "status": "done",
            "testStrategy": "Verify databases created with correct tenant-specific naming convention, confirm S3 paths point to tenant-specific locations"
          },
          {
            "id": 3,
            "title": "Update Lake Formation Tags to Include TenantId Support",
            "description": "Enhance LakeFormationTagsConstruct.cs to include TenantId as a required tag alongside existing Environment, DataClassification, and PHI tags",
            "dependencies": [
              "37.1"
            ],
            "details": "1. Add TenantId tag creation to LakeFormationTagsConstruct.cs with values sourced from configuration tenant GUIDs. 2. Update tag creation in LakeFormationSetupStack.cs to include TenantId tag values from environment config. 3. Replace hardcoded tenant values ('tenant-a', 'tenant-b', etc.) with actual tenant GUIDs from configuration. 4. Ensure TenantId tag is applied to all databases and resources created. 5. Update GetAllTags() method to include TenantId tag in returned dictionary.",
            "status": "done",
            "testStrategy": "Confirm TenantId LF-Tags are created with correct GUID values, verify tags are properly associated with tenant-specific resources"
          },
          {
            "id": 4,
            "title": "Configure Test HealthLake Instances with Dedicated Tenant GUIDs",
            "description": "Update configuration to map dedicated HealthLake instances to specific tenant GUIDs for both dev and prod environments",
            "dependencies": [
              "37.1"
            ],
            "details": "1. Update lakeformation-config.json to include specific HealthLake datastore IDs and ARNs for each environment's dedicated tenant. 2. Assign test tenant GUID (e.g., 00000000-0000-0000-0000-000000000001) for dev environment. 3. Assign production tenant GUID for prod environment HealthLake instance. 4. Remove enableMultiTenancy flags and tenantClaimSystem references from HealthLake configuration. 5. Document the mapping between HealthLake instances and tenant GUIDs in configuration comments.",
            "status": "done",
            "testStrategy": "Verify HealthLake datastore configuration loads correctly with tenant-specific GUIDs, confirm single-tenant mapping is established"
          },
          {
            "id": 5,
            "title": "Update Permission Constructs for Single-Tenant Resource Access",
            "description": "Modify LakeFormationPermissionsConstruct.cs to grant access based on tenant-specific resources rather than shared multi-tenant resources",
            "dependencies": [
              "37.2",
              "37.3"
            ],
            "details": "1. Update LakeFormationPermissionsConstruct.cs to reference tenant-specific database names (thirdopinion_{environment}_{tenantGuid}). 2. Modify group permissions to target single-tenant databases instead of multi-tenant shared resources. 3. Update allowedDatabases in group mappings configuration to use tenant-specific database names. 4. Remove multi-tenant filtering logic since each instance serves only one tenant. 5. Simplify permission validation to work with single-tenant architecture. 6. Update any table-level permissions to reflect tenant-specific database structure.",
            "status": "done",
            "testStrategy": "Verify permissions are correctly applied to tenant-specific databases, confirm access controls work for single-tenant resources, test that groups cannot access other tenants' data"
          }
        ]
      },
      {
        "id": 38,
        "title": "Implement CDK Native Optimization for deploy-dev.yml Workflow",
        "description": "Replace 9 separate deployment jobs with streamlined CDK approach using native deployment capabilities to reduce deployment time from 25-30 minutes to 15 minutes for full deployments and 5 minutes when no changes are present.",
        "details": "Refactor the deploy-dev.yml GitHub Actions workflow to use CDK's built-in deployment optimization features: 1) Create consolidated deployment job for regular apps (TrialFinderV2, TrialMatch) using 'cdk deploy --all' with --concurrency 3 flag for parallel execution and --exclusively flag to skip unchanged stacks. 2) Create separate job for LakeFormation stacks deployment maintaining isolation from regular apps. 3) Implement --outputs-file flag to consolidate deployment outputs into single file for easier consumption by downstream jobs. 4) Add comprehensive error handling with proper exit codes and detailed logging for debugging failed deployments. 5) Maintain existing build-and-test and cdk-diff jobs for visibility and validation. 6) Configure job dependencies to ensure proper execution order while maximizing parallelization opportunities. 7) Add environment variables and matrix strategies to support different deployment scenarios. 8) Implement conditional deployment logic to skip unnecessary deployments when no changes are detected.",
        "testStrategy": "Test the optimized workflow in dev environment by triggering deployments with various change scenarios: full deployment with all stacks changed, partial deployment with only some stacks changed, and no-change deployment to verify --exclusively flag works correctly. Measure and document deployment times for each scenario to confirm 15-minute target for full deployments and 5-minute target for no-change deployments. Verify that error handling properly reports failures and that logs provide sufficient detail for debugging. Test that regular apps and LakeFormation deployments maintain proper isolation and that consolidated outputs file contains all necessary deployment information.",
        "status": "pending",
        "dependencies": [
          33,
          37
        ],
        "priority": "medium",
        "subtasks": [
          {
            "id": 1,
            "title": "Create consolidated regular apps deployment job",
            "description": "Replace separate ALB, ECS, DATA, and COGNITO deployment jobs for TrialFinderV2 and TrialMatch with a single consolidated job that uses CDK's native --all deployment capability",
            "dependencies": [],
            "details": "Modify deploy-dev.yml to create a new 'deploy-regular-apps' job that replaces deploy-alb, deploy-cognito, deploy-ecs, and deploy-data jobs. Use matrix strategy for apps [TrialFinderV2, TrialMatch] and implement cdk deploy --all command with --concurrency 3 flag for parallel execution and --exclusively flag to skip unchanged stacks. Configure proper job dependencies to run after deploy-base. Add comprehensive error handling with proper exit codes and detailed logging.",
            "status": "pending",
            "testStrategy": "Test the new consolidated job in dev environment by triggering deployments with different change scenarios. Verify that --exclusively flag skips unchanged stacks and that parallel execution works correctly with --concurrency 3."
          },
          {
            "id": 2,
            "title": "Implement optimized LakeFormation deployment job",
            "description": "Consolidate the three separate LakeFormation deployment jobs (storage, setup, permissions) into a single optimized job while maintaining proper dependency order",
            "dependencies": [
              "38.1"
            ],
            "details": "Replace deploy-lakeformation-storage, deploy-lakeformation-setup, and deploy-lakeformation-permissions jobs with a single 'deploy-lakeformation' job. Use cdk deploy with multiple stack names in dependency order (dev-lf-storage-ue2 dev-lf-setup-ue2 dev-lf-permissions-ue2) and implement --outputs-file flag for consolidated output. Maintain isolation from regular apps by having separate job dependency chain. Add error handling specific to LakeFormation deployment requirements.",
            "status": "pending",
            "testStrategy": "Verify that LakeFormation stacks deploy in correct dependency order and that the job properly isolates from regular app deployments. Test error scenarios to ensure proper rollback behavior."
          },
          {
            "id": 3,
            "title": "Add conditional deployment logic and change detection",
            "description": "Implement logic to skip unnecessary deployments when no changes are detected using CDK's built-in change detection capabilities",
            "dependencies": [
              "38.1",
              "38.2"
            ],
            "details": "Add conditional deployment logic using CDK diff output to determine if deployments are needed. Implement workflow logic that uses 'cdk diff --quiet' exit codes to conditionally run deployment steps. Add environment variables and conditions to skip deployment jobs when no changes are detected. Configure proper workflow outputs to communicate skip status to downstream jobs. Ensure build-and-test and cdk-diff jobs always run for visibility and validation.",
            "status": "pending",
            "testStrategy": "Test no-change deployment scenarios to verify 5-minute target time when --exclusively flag detects no changes. Validate that change detection works correctly across different types of stack modifications."
          },
          {
            "id": 4,
            "title": "Implement consolidated outputs and comprehensive error handling",
            "description": "Add --outputs-file flag usage and implement comprehensive error handling with proper exit codes and detailed logging across all deployment jobs",
            "dependencies": [
              "38.1",
              "38.2"
            ],
            "details": "Implement --outputs-file flag for all CDK deploy commands to consolidate deployment outputs into single files for easier consumption by downstream jobs. Add comprehensive error handling with specific exit codes for different failure scenarios (build failures, deployment failures, validation failures). Implement detailed logging with timestamps and deployment status indicators. Configure artifact upload for consolidated output files. Add timeout configurations and retry logic for deployment operations.",
            "status": "pending",
            "testStrategy": "Test error scenarios including build failures, deployment timeouts, and CDK errors to verify proper error handling and logging. Validate that consolidated output files contain all necessary deployment information and are properly uploaded as artifacts."
          },
          {
            "id": 5,
            "title": "Optimize job dependencies and parallelization opportunities",
            "description": "Configure job dependencies to ensure proper execution order while maximizing parallelization opportunities to achieve the 15-minute deployment target",
            "dependencies": [
              "38.1",
              "38.2",
              "38.3",
              "38.4"
            ],
            "details": "Restructure job dependencies to maximize parallel execution while maintaining required dependency chains. Configure build-and-test and cdk-diff jobs to run in parallel where possible. Ensure deploy-base runs before both regular apps and LakeFormation deployments. Set up parallel execution for regular apps deployment (when multiple apps have changes) and optimize job scheduling. Add matrix strategies and environment variables to support different deployment scenarios. Configure proper timeouts and resource allocation for parallel jobs.",
            "status": "pending",
            "testStrategy": "Measure deployment times for various scenarios: full deployment with all stacks changed (target: 15 minutes), partial deployment with subset of stacks changed, and no-change deployment (target: 5 minutes). Verify that parallelization works correctly and doesn't cause resource conflicts or dependency issues."
          }
        ]
      },
      {
        "id": 39,
        "title": "Implement Lake Formation IAM Roles for Identity Center Integration",
        "description": "Create IAM roles that correspond to Identity Center groups for proper Lake Formation permissions and access control, resolving current permissions stack deployment failures by providing IAM role ARNs instead of group names.",
        "status": "done",
        "dependencies": [
          28,
          29
        ],
        "priority": "medium",
        "details": "This task involves creating a comprehensive set of IAM roles to enable proper Identity Center integration with Lake Formation based on specific group mappings: 1) Create IAM roles for each environment and access level: LakeFormation-DataAnalyst-Development (maps to data-analysts-dev), LakeFormation-DataEngineer-Development (maps to data-engineers-dev), LakeFormation-DataAnalyst-Production (maps to data-analysts-phi), LakeFormation-DataEngineer-Production (maps to data-engineers-phi), LakeFormation-Admin-Production (maps to data-lake-admin-prd), LakeFormation-Admin-Development (maps to data-engineers-dev), and LakeFormation-CatalogCreator roles for both environments. 2) Implement trust policies that reference the correct Identity Center instance ARN (arn:aws:sso:::instance/ssoins-66849025a110d385) and allow sts:AssumeRoleWithSAML and sts:TagSession actions. 3) Attach role-specific permissions: data analysts get SELECT/DESCRIBE permissions, data engineers get full permissions in their environment, catalog creators get CREATE_DATABASE/DESCRIBE/ALTER permissions, and admins get full Lake Formation administrative access. 4) Update LakeFormationSetupConstruct.cs to add IAM role ARNs to data lake administrators and catalog creators settings. 5) Modify PermissionsConstruct.cs to use IAM role ARNs instead of Identity Center group names when granting Lake Formation permissions. 6) Create Identity Center permission sets that map existing groups with their specific IDs to their corresponding IAM roles. 7) Ensure proper session tags are configured to maintain audit trails and enable attribute-based access control.",
        "testStrategy": "Deploy the updated Lake Formation permissions stack and verify successful deployment without errors. Test that users from each Identity Center group can assume their corresponding IAM roles through the AWS console. Validate that Lake Formation data lake administrators list correctly shows IAM role ARNs instead of group names. Verify catalog creator permissions are properly configured and functional by testing database creation capabilities. Test data access permissions by having users from different groups attempt to query tables through Athena or other Lake Formation-integrated services. Execute permission validation scripts to confirm each role has the expected Lake Formation permissions. Verify that the new IAM roles appear correctly in the AWS Lake Formation console under data lake administrators and that permissions can be granted using the role ARNs.",
        "subtasks": [
          {
            "id": 1,
            "title": "Create IAM Roles Construct for Identity Center Integration",
            "description": "Create a new CDK construct (LakeFormationIdentityCenterRolesConstruct.cs) that defines IAM roles corresponding to Identity Center groups with proper trust policies allowing Identity Center assumption via SAML",
            "status": "done",
            "dependencies": [],
            "details": "Implement LakeFormationIdentityCenterRolesConstruct.cs in /Users/ken/code/AppInfraCdkV1/AppInfraCdkV1.InternalApps/LakeFormation/Constructs/ that creates specific IAM roles: LakeFormation-DataAnalyst-Development (for data-analysts-dev: 018b8550-9071-70ef-4204-7120281ac19b), LakeFormation-DataEngineer-Development (for data-engineers-dev: 613b1560-20b1-70c1-06fb-3ab507e41773), LakeFormation-DataAnalyst-Production (for data-analysts-phi: 511be500-20f1-707b-80ca-33140a93b483), LakeFormation-DataEngineer-Production (for data-engineers-phi: c12b0510-8081-70d2-945d-77f64fbd73c6), LakeFormation-Admin-Production (for data-lake-admin-prd: d14b65b0-10d1-70da-6801-3b67fa213c71), LakeFormation-Admin-Development (for data-engineers-dev as they have isDataLakeAdmin: true), and LakeFormation-CatalogCreator roles for both environments. Each role should have trust policies referencing Identity Center instance ARN (arn:aws:sso:::instance/ssoins-66849025a110d385) and allow sts:AssumeRoleWithSAML and sts:TagSession actions. Follow existing construct patterns from the codebase.\n<info added on 2025-08-17T14:22:33.892Z>\nThe task details already contain comprehensive information about the Identity Center groups and IAM roles. Based on the user request, here is the additional clarification and prioritization information that should be appended:\n\nImplementation priority order: Start with development environment roles (LakeFormation-DataAnalyst-Development, LakeFormation-DataEngineer-Development, LakeFormation-Admin-Development, LakeFormation-CatalogCreator-Development) before proceeding to production roles. This approach allows for testing and validation in the development environment first.\n\nKey implementation requirements: Each role must include condition statements in the trust policy to restrict assumption to the specific Identity Center group ID (e.g., aws:userid contains the group ID). Role names should follow the exact naming convention specified for easy identification in the Lake Formation console and AWS IAM console.\n\nCatalogCreator role assignment: In development, only data-engineers-dev group gets CatalogCreator role. In production, both data-engineers-phi and data-lake-admin-prd groups should be able to assume the CatalogCreator role, requiring either separate roles or a shared role with multiple group conditions in the trust policy.\n</info added on 2025-08-17T14:22:33.892Z>",
            "testStrategy": "Deploy the construct and verify IAM roles are created with correct trust policies. Test that the roles can be assumed through Identity Center console by users from the mapped groups."
          },
          {
            "id": 2,
            "title": "Attach Managed Policies and Custom Permissions to IAM Roles",
            "description": "Implement role-specific managed policies and custom inline policies for each IAM role based on their intended Lake Formation access levels and PHI access requirements",
            "status": "done",
            "dependencies": [
              1
            ],
            "details": "Add role-specific permissions: LakeFormation-DataAnalyst-Development gets SELECT/DESCRIBE on development databases with excludePHI: true, LakeFormation-DataEngineer-Development gets ALL permissions on development databases with isDataLakeAdmin: true, LakeFormation-DataAnalyst-Production gets PHI-enabled access, LakeFormation-DataEngineer-Production gets full production access, LakeFormation-Admin-Production gets full Lake Formation administrative access including create/delete/modify LF-tags and grant/revoke all data permissions, and LakeFormation-CatalogCreator roles get CREATE_DATABASE/DESCRIBE/ALTER permissions. Configure session tags for audit trails and implement attribute-based access control patterns. Ensure roles have appropriate S3 and Glue permissions matching the group mappings from lakeformation-config.json.\n<info added on 2025-08-17T14:23:06.870Z>\nRole-specific permission configurations:\n\n**Development Environment Roles:**\n\nLakeFormation-DataAnalyst-Development:\n- Lake Formation permissions: SELECT, DESCRIBE on development databases only\n- PHI access: excludePHI: true (no access to PHI-tagged resources)\n- S3 permissions: Read-only access to non-PHI data paths in development buckets\n- Athena permissions: Query execution on development data only\n- Managed policies: Custom LakeFormationDataAnalystDev policy\n\nLakeFormation-DataEngineer-Development:\n- Lake Formation permissions: ALL permissions on development databases\n- Admin privileges: isDataLakeAdmin: true for development environment\n- S3 permissions: Full read/write access to all development S3 buckets\n- Athena permissions: Full query and workgroup management in development\n- Glue permissions: Full Data Catalog access for development resources\n- Managed policies: Custom LakeFormationDataEngineerDev policy\n\nLakeFormation-Admin-Development:\n- Lake Formation permissions: Full administrative access in development environment only\n- LF-Tags management: Create, delete, modify LF-tags for development\n- Resource management: Register/deregister S3 locations in development\n- Permission management: Grant/revoke data permissions for development resources\n\nLakeFormation-CatalogCreator-Development:\n- Lake Formation permissions: CREATE_DATABASE, DESCRIBE, ALTER for development\n- Scope: Limited to development database creation and catalog management\n\n**Production Environment Roles:**\n\nLakeFormation-DataAnalyst-Production:\n- Lake Formation permissions: SELECT, DESCRIBE with full PHI access enabled\n- PHI access: Full access to PHI-tagged resources in production\n- S3 permissions: Read-only access to production data including PHI paths\n- Athena permissions: Query execution on all production data\n- Managed policies: Custom LakeFormationDataAnalystProd policy\n\nLakeFormation-DataEngineer-Production:\n- Lake Formation permissions: ALL permissions with PHI access enabled\n- Admin privileges: isDataLakeAdmin: true for production environment\n- S3 permissions: Full access to production S3 buckets including PHI data\n- Glue permissions: Full Data Catalog access for production resources\n- Managed policies: Custom LakeFormationDataEngineerProd policy\n\nLakeFormation-Admin-Production:\n- Lake Formation permissions: Full Lake Formation administrative access\n- LF-Tags management: Create, delete, modify LF-tags across all environments\n- Permission management: Grant/revoke all data permissions system-wide\n- Resource management: Register/deregister S3 locations across environments\n- Managed policies: AWSLakeFormationDataAdmin\n\nLakeFormation-CatalogCreator-Production:\n- Lake Formation permissions: CREATE_DATABASE, DESCRIBE, ALTER for production\n- Scope: Production database creation and catalog management\n\n**Policy Attachments:**\n\nAdministrative Roles:\n- AWSLakeFormationDataAdmin managed policy for LakeFormation-Admin-Production\n- Custom LakeFormationAdminDev inline policy for LakeFormation-Admin-Development\n\nData Access Roles:\n- Custom inline policies with specific Lake Formation permissions based on role scope\n- S3 bucket policies aligned with group mappings from lakeformation-config.json\n- Environment-specific Glue permissions for catalog access\n\n**Session Tags Configuration:**\n- Environment tag: Development/Production based on role scope\n- AccessLevel tag: Analyst/Engineer/Admin/CatalogCreator\n- PHIAccess tag: Enabled/Disabled based on role PHI permissions\n- PrincipalTag conditions in policies for attribute-based access control (ABAC)\n\n**Cross-Environment Access Controls:**\n- Development roles explicitly denied access to production resources\n- Production roles have no access to development resources unless specifically granted\n- Clear separation of duties between environments through IAM policy conditions\n</info added on 2025-08-17T14:23:06.870Z>",
            "testStrategy": "Verify each role has correct policies attached based on environment and PHI access requirements. Test that role permissions align with group access requirements defined in configuration and PHI restrictions work properly."
          },
          {
            "id": 3,
            "title": "Update LakeFormationSetupStack to Use IAM Role ARNs",
            "description": "Modify LakeFormationSetupStack.cs to replace hardcoded Identity Center group references with IAM role ARNs in data lake settings configuration",
            "status": "done",
            "dependencies": [
              2
            ],
            "details": "Update the ConfigureDataLakeSettings() method in LakeFormationSetupStack.cs to add LakeFormation-Admin-Development and LakeFormation-Admin-Production to Data Lake Administrators list. Add LakeFormation-CatalogCreator-Development and LakeFormation-CatalogCreator-Production to the currently empty catalog creators configuration. Integrate the new LakeFormationIdentityCenterRolesConstruct and use its role outputs in the DataLakeSettings configuration. Remove any hardcoded Identity Center group references and replace with proper IAM role ARNs.\n<info added on 2025-08-17T14:23:26.901Z>\nCurrent deployment issues stem from hardcoded Identity Center group names that cause Lake Formation configuration failures. The ConfigureDataLakeSettings() method must be updated to reference IAM role ARNs instead of group names.\n\nSpecific implementation requirements:\n1. Import LakeFormationIdentityCenterRolesConstruct in the LakeFormationSetupStack constructor\n2. Access role ARNs through the construct's output properties\n3. Replace hardcoded references to 'data-engineers-dev' and similar group names with proper role ARNs\n4. Configure DataLakeAdministrators array to include:\n   - arn:aws:iam::615299752206:role/LakeFormation-Admin-Development  \n   - arn:aws:iam::615299752206:role/LakeFormation-Admin-Production\n5. Configure CreateDatabaseDefaultPermissions to include catalog creator roles:\n   - arn:aws:iam::615299752206:role/LakeFormation-CatalogCreator-Development\n   - arn:aws:iam::615299752206:role/LakeFormation-CatalogCreator-Production\n\nThis change addresses the root cause of deployment failures where Lake Formation cannot resolve Identity Center group names directly and requires IAM role ARNs for proper service integration.\n</info added on 2025-08-17T14:23:26.901Z>",
            "testStrategy": "Deploy the updated setup stack and verify data lake settings show IAM role ARNs for both administrators and catalog creators. Confirm catalog creator permissions are properly configured and no longer empty."
          },
          {
            "id": 4,
            "title": "Modify LakeFormationPermissionsStack to Use IAM Role ARNs",
            "description": "Update LakeFormationPermissionsStack.cs to use IAM role ARNs instead of Identity Center group identifiers when granting Lake Formation permissions",
            "status": "done",
            "dependencies": [
              2
            ],
            "details": "Modify the BuildIdentityCenterPrincipal() method in LakeFormationPermissionsStack.cs to return IAM role ARNs instead of constructing Identity Center group ARNs with CfnParameter placeholders. Update all permission granting methods to use the specific role ARNs: LakeFormation-DataAnalyst-Development for data-analysts-dev, LakeFormation-DataEngineer-Development for data-engineers-dev, LakeFormation-DataAnalyst-Production for data-analysts-phi, LakeFormation-DataEngineer-Production for data-engineers-phi, and LakeFormation-Admin-Production for data-lake-admin-prd. Remove the CfnParameter usage for group IDs as roles will be directly referenced from the LakeFormationIdentityCenterRolesConstruct.\n<info added on 2025-08-17T14:23:53.842Z>\nImplementation approach for BuildIdentityCenterPrincipal() method modification:\n\n1. Method signature change:\n   - Replace CfnParameter inputs with direct role name parameter\n   - Return constructed IAM role ARN string instead of SSO group ARN\n   - Example: BuildIdentityCenterPrincipal(string roleName) returns $\"arn:aws:iam::615299752206:role/{roleName}\"\n\n2. Permission method updates for each group mapping:\n   - Replace all calls to BuildIdentityCenterPrincipal() with specific role names\n   - data-analysts-dev: BuildIdentityCenterPrincipal(\"LakeFormation-DataAnalyst-Development\")\n   - data-engineers-dev: BuildIdentityCenterPrincipal(\"LakeFormation-DataEngineer-Development\")\n   - data-analysts-phi: BuildIdentityCenterPrincipal(\"LakeFormation-DataAnalyst-Production\")\n   - data-engineers-phi: BuildIdentityCenterPrincipal(\"LakeFormation-DataEngineer-Production\")\n   - data-lake-admin-prd: BuildIdentityCenterPrincipal(\"LakeFormation-Admin-Production\")\n\n3. Constructor and parameter cleanup:\n   - Remove CfnParameter declarations for IdentityCenterInstanceId\n   - Remove CfnParameter declarations for all group ID parameters\n   - Remove parameter passing from stack constructor to permissions construct\n   - Update any CloudFormation template outputs that reference removed parameters\n\n4. Permission configuration validation:\n   - Ensure PHI exclusion logic (excludePHI parameter) aligns with Production analyst roles\n   - Verify admin privileges (isDataLakeAdmin parameter) only set for LakeFormation-Admin-Production role\n   - Maintain environment scoping in permission grants to prevent cross-environment access\n   - Update any conditional logic that previously used group IDs for role-based checks\n\n5. Integration with LakeFormationIdentityCenterRolesConstruct:\n   - Reference role ARNs from the roles construct if available as properties\n   - Ensure consistent role naming between both constructs\n   - Add validation that referenced roles exist before granting permissions\n</info added on 2025-08-17T14:23:53.842Z>",
            "testStrategy": "Deploy the permissions stack and verify Lake Formation permissions are granted to specific IAM roles instead of Identity Center groups. Test that permission deployment succeeds without parameter placeholder errors and that each role has the expected permissions."
          },
          {
            "id": 5,
            "title": "Create Identity Center Permission Sets for Role Mapping",
            "description": "Design and document the Identity Center permission sets that map existing groups to their corresponding IAM roles, enabling users to assume roles through Identity Center",
            "status": "done",
            "dependencies": [
              3,
              4
            ],
            "details": "Create documentation and configuration for Identity Center permission sets that allow specific groups to assume their corresponding IAM roles: data-analysts-dev (018b8550-9071-70ef-4204-7120281ac19b) → LakeFormation-DataAnalyst-Development, data-engineers-dev (613b1560-20b1-70c1-06fb-3ab507e41773) → LakeFormation-DataEngineer-Development and LakeFormation-Admin-Development, data-analysts-phi (511be500-20f1-707b-80ca-33140a93b483) → LakeFormation-DataAnalyst-Production, data-engineers-phi (c12b0510-8081-70d2-945d-77f64fbd73c6) → LakeFormation-DataEngineer-Production and LakeFormation-CatalogCreator-Production, data-lake-admin-prd (d14b65b0-10d1-70da-6801-3b67fa213c71) → LakeFormation-Admin-Production and LakeFormation-CatalogCreator-Production. Define session tags configuration to maintain audit trails. Provide scripts or manual steps for setting up these permission sets in the Identity Center console since they cannot be fully automated via CDK due to cross-account constraints.\n<info added on 2025-08-17T14:24:30.596Z>\n## Detailed Permission Set Specifications\n\n**LakeFormation-DataAnalyst-Dev-PermissionSet**\n- Target Group: data-analysts-dev (018b8550-9071-70ef-4204-7120281ac19b)\n- Assume Role: LakeFormation-DataAnalyst-Development\n- Session Duration: 8 hours\n- Required Session Tags: Environment=Development, AccessLevel=Analyst, PHIAccess=Disabled\n\n**LakeFormation-DataEngineer-Dev-PermissionSet**\n- Target Group: data-engineers-dev (613b1560-20b1-70c1-06fb-3ab507e41773)\n- Assume Roles: LakeFormation-DataEngineer-Development, LakeFormation-Admin-Development, LakeFormation-CatalogCreator-Development\n- Session Duration: 8 hours\n- Required Session Tags: Environment=Development, AccessLevel=Engineer, PHIAccess=Enabled, AdminRole=true\n\n**LakeFormation-DataAnalyst-Prod-PermissionSet**\n- Target Group: data-analysts-phi (511be500-20f1-707b-80ca-33140a93b483)\n- Assume Role: LakeFormation-DataAnalyst-Production\n- Session Duration: 4 hours (reduced for production security)\n- Required Session Tags: Environment=Production, AccessLevel=Analyst, PHIAccess=Enabled\n\n**LakeFormation-DataEngineer-Prod-PermissionSet**\n- Target Group: data-engineers-phi (c12b0510-8081-70d2-945d-77f64fbd73c6)\n- Assume Roles: LakeFormation-DataEngineer-Production, LakeFormation-CatalogCreator-Production\n- Session Duration: 4 hours\n- Required Session Tags: Environment=Production, AccessLevel=Engineer, PHIAccess=Enabled\n\n**LakeFormation-Admin-Prod-PermissionSet**\n- Target Group: data-lake-admin-prd (d14b65b0-10d1-70da-6801-3b67fa213c71)\n- Assume Roles: LakeFormation-Admin-Production, LakeFormation-CatalogCreator-Production\n- Session Duration: 2 hours (minimal admin session time)\n- Required Session Tags: Environment=Production, AccessLevel=Admin, PHIAccess=Enabled, AdminRole=true\n\n## Implementation Constraints and Requirements\n\nManual configuration required due to CDK cross-account limitations with Identity Center permission sets. Will provide console-based setup documentation and validation scripts. Session tag enforcement ensures proper audit trails through CloudTrail logging. Session durations follow least-privilege principle with production environments having shorter access windows for enhanced security. Group-to-role mappings must exactly match the specified Identity Center group IDs to maintain proper access controls.\n</info added on 2025-08-17T14:24:30.596Z>",
            "testStrategy": "Verify that users from each Identity Center group can assume their corresponding IAM roles through the AWS console. Test that session tags are properly configured and visible in CloudTrail logs. Validate that each group can only access their designated environment and data classification levels."
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-01-12T00:21:00.000Z",
      "updated": "2025-08-17T14:43:49.538Z",
      "description": "Tasks for master context"
    }
  }
}