# Task ID: 7
# Title: Implement ECS task execution and task roles with Secrets Manager access
# Status: pending
# Dependencies: 3, 5
# Priority: medium
# Description: Configure ECS task execution role and task roles to securely access AWS Secrets Manager secrets using environment-based naming conventions and resource-scoped IAM policies.
# Details:
1. Create IAM Policies for Secrets Manager Access:
   - Define policy for task execution role to decrypt secrets using KMS
   - Create environment-specific policies with resource patterns:
     * Development: arn:aws:secretsmanager:us-east-2:615299752206:secret:/dev/myapp/*
     * Production: arn:aws:secretsmanager:us-east-2:442042533707:secret:/prod/myapp/*
   - Include actions: secretsmanager:GetSecretValue, secretsmanager:DescribeSecret
   - Add KMS permissions for secret decryption

2. Update ECS Task Execution Role:
   - Modify existing execution role or create new one with pattern: {environment}-ecs-task-execution-role-{region}
   - Attach AWS managed policy: arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
   - Add custom policy for Secrets Manager access with least privilege
   - Enable pulling secrets for container environment variables

3. Create ECS Task Roles:
   - Implement task role pattern: {environment}-{application}-task-role-{region}
   - Create separate roles for each environment (dev, staging, prod)
   - Attach environment-specific Secrets Manager policies
   - Implement resource constraints using naming convention paths

4. Create Test Secrets in Secrets Manager:
   - Development secrets:
     * /dev/myapp/database-connection
     * /dev/myapp/api-key
     * /dev/myapp/service-credentials
   - Production secrets:
     * /prod/myapp/database-connection
     * /prod/myapp/api-key
     * /prod/myapp/service-credentials
   - Use AWS CLI: aws secretsmanager create-secret --name /dev/myapp/database-connection --secret-string '{"username":"devuser","password":"devpass"}'

5. Update CDK Stack Implementation:
   - Modify TrialFinderV2Stack to use new task execution role
   - Configure task definition to reference secrets as environment variables
   - Use secrets property in container definition:
     ```typescript
     secrets: {
       DB_CONNECTION: ecs.Secret.fromSecretsManager(dbSecret),
       API_KEY: ecs.Secret.fromSecretsManager(apiKeySecret)
     }
     ```

6. Implement Resource Scoping:
   - Use IAM policy conditions to enforce path-based access
   - Add explicit Deny statements for cross-environment access
   - Example policy condition:
     ```json
     "Condition": {
       "StringLike": {
         "secretsmanager:SecretId": "/{environment}/{application-name}/*"
       }
     }
     ```

# Test Strategy:
1. Create Integration Test Task:
   - Deploy a test ECS task with minimal container that includes AWS CLI
   - Configure task to use the new task role
   - Mount test script that attempts to read secrets

2. Test Allowed Access:
   - Run aws secretsmanager get-secret-value --secret-id /dev/myapp/database-connection
   - Verify successful retrieval of development secrets
   - Confirm all environment-specific secrets are accessible

3. Test Denied Access:
   - Attempt to read production secrets from development task role
   - Run aws secretsmanager get-secret-value --secret-id /prod/myapp/database-connection
   - Verify access is denied with appropriate error message
   - Test cross-application access is blocked

4. Validate ECS Integration:
   - Deploy updated TrialFinderV2Stack with secrets configuration
   - Verify containers start successfully with injected secrets
   - Check CloudWatch logs to ensure no secret values are exposed
   - Confirm environment variables are properly set from secrets

5. Security Validation:
   - Use AWS Access Analyzer to verify IAM policies are correctly scoped
   - Run aws iam simulate-principal-policy to test various access scenarios
   - Ensure task execution role can only access secrets during task startup
   - Verify task role maintains access throughout task lifecycle

# Subtasks:
## 1. Create IAM policies for Secrets Manager access [pending]
### Dependencies: None
### Description: Design and implement IAM policies that provide environment-specific access to Secrets Manager resources using path-based restrictions
### Details:
Create separate IAM policies for dev, staging, and production environments. Each policy should restrict access to secrets under specific paths (e.g., /dev/*, /staging/*, /prod/*). Include conditions to prevent cross-environment access and ensure proper resource tagging. Define actions like secretsmanager:GetSecretValue, secretsmanager:DescribeSecret with appropriate resource constraints.
<info added on 2025-07-12T20:25:55.433Z>
Successfully implemented environment-specific IAM policies for Secrets Manager access. Created dev-ecs-secrets-manager-policy (arn:aws:iam::615299752206:policy/dev-ecs-secrets-manager-policy) with path-based restrictions to /dev/* secrets only. Policy includes KMS decryption permissions for secret encryption keys and explicit deny statements for cross-environment access. Also created prod-secrets-manager-policy.json for production environment with access to /prod/* secrets in account 442042533707. Policies enforce environment isolation using resource ARN patterns and conditional access based on resource tags.
</info added on 2025-07-12T20:25:55.433Z>

## 2. Configure ECS task execution role with permissions [pending]
### Dependencies: 7.1
### Description: Set up the ECS task execution role with required permissions for KMS decryption and Secrets Manager access
### Details:
Create or update the ECS task execution role to include permissions for KMS key usage (kms:Decrypt, kms:DescribeKey) and Secrets Manager operations. Ensure the execution role can pull container images from ECR and write logs to CloudWatch. Apply least privilege principles and include condition keys for service-specific access.
<info added on 2025-07-12T20:26:46.189Z>
Implementation completed successfully. The dev-ecs-task-execution-role-ue2 role has been created with ARN arn:aws:iam::615299752206:role/dev-ecs-task-execution-role-ue2. The role includes proper trust policy for ecs-tasks.amazonaws.com service assumption, AWS managed AmazonECSTaskExecutionRolePolicy for ECR and CloudWatch access, and custom dev-ecs-secrets-manager-policy providing environment-specific Secrets Manager access with KMS decryption capabilities. The configuration enables secure container image pulling and secrets retrieval during task startup while maintaining proper security isolation.
</info added on 2025-07-12T20:26:46.189Z>

## 3. Create environment-specific ECS task roles [pending]
### Dependencies: 7.1, 7.2
### Description: Implement separate ECS task roles for each environment with appropriate resource constraints and permissions
### Details:
Create distinct task roles for dev, staging, and production environments. Each role should have environment-specific permissions and resource access patterns. Include necessary permissions for application functionality while maintaining strict boundaries between environments. Implement resource tags and conditions to enforce separation.
<info added on 2025-07-12T20:27:25.417Z>
Implementation Status: Development environment task role completed. Created dev-trialfinder-task-role-ue2 (arn:aws:iam::615299752206:role/dev-trialfinder-task-role-ue2) with ECS service trust policy and dev-ecs-secrets-manager-policy attached for runtime access to /dev/* secrets path. Role follows naming convention {environment}-{application}-task-role-{region}. Need to replicate for staging and production environments with appropriate policy variations for their respective secret paths and resource access patterns.
</info added on 2025-07-12T20:27:25.417Z>

## 4. Set up test secrets in Secrets Manager [pending]
### Dependencies: 7.1
### Description: Create test secrets in AWS Secrets Manager following the established naming conventions for each environment
### Details:
Create sample secrets in Secrets Manager with proper naming conventions (e.g., /dev/app/db-connection, /staging/app/api-key). Include various secret types like database credentials, API keys, and configuration values. Tag secrets appropriately for environment identification and access control. Ensure KMS encryption is properly configured for each secret.
<info added on 2025-07-12T20:28:25.226Z>
Implementation completed: Successfully created three development environment test secrets in AWS Secrets Manager following the established naming convention with /dev/trialfinder/ path prefix. Created secrets include database-connection (containing sample DB credentials), api-keys (containing third-party service keys), and jwt-config (containing JWT signing configuration). All secrets properly configured with KMS encryption enabled by default and tagged with Environment=Development, Application=TrialFinder, and appropriate SecretType classification tags for access control and environment identification. ARNs documented for reference in ECS task role policy creation.
</info added on 2025-07-12T20:28:25.226Z>

## 5. Update CDK stack for role integration and secret injection [pending]
### Dependencies: 7.1, 7.2, 7.3, 7.4
### Description: Modify the CDK stack to use the new IAM roles and implement secret injection as environment variables in ECS tasks
### Details:
Update the CDK code to reference the new IAM roles in ECS task definitions. Implement secret retrieval from Secrets Manager and injection as environment variables using CDK's ECS patterns. Configure the task definition to use the appropriate execution and task roles. Ensure proper error handling and fallback mechanisms.
<info added on 2025-07-12T20:29:31.602Z>
Implementation completed successfully. Created EcsTaskWithSecrets construct in AppInfraCdkV1.Stacks.Components/EcsTaskWithSecrets.cs that provides reusable pattern for ECS tasks with IAM roles and secret injection. The construct references existing IAM roles by ARN (dev-ecs-task-execution-role-ue2 for execution, dev-trialfinder-task-role-ue2 for task access) and implements secret retrieval using CDK's Secret.FromSecretsManager() method for database credentials, API keys, and JWT configuration. Example implementation created in TrialFinderEcsExampleStack.cs demonstrates proper usage with Fargate task definition (256 CPU/512MB memory), CloudWatch logging configuration, and comprehensive tagging. All secrets are properly injected as environment variables with error handling and fallback mechanisms in place.
</info added on 2025-07-12T20:29:31.602Z>

## 6. Test IAM policy conditions and access prevention [pending]
### Dependencies: 7.1, 7.2, 7.3, 7.4, 7.5
### Description: Implement comprehensive tests to verify cross-environment access prevention and validate all IAM policy conditions
### Details:
Create test scenarios to verify that dev environment cannot access prod secrets and vice versa. Test KMS key permissions and encryption/decryption operations. Validate that ECS tasks can only access their designated secrets. Implement automated tests using AWS SDK to verify policy effectiveness. Document test results and any security findings.
<info added on 2025-07-12T20:32:45.143Z>
Successfully completed comprehensive IAM policy validation with automated testing scripts. Implemented validate-iam-policies.sh script that confirms all security controls are working correctly including role existence and policy attachments, proper secret tagging (Environment=Development, Application=TrialFinder), correct permissions with path restrictions to /dev/* only, explicit deny statements blocking access to /staging/* and /prod/* paths, and VPC endpoint configuration for private Secrets Manager access. All tests passed demonstrating effective environment isolation and least privilege access implementation. Security validation confirms that development environment cannot access production or staging secrets, maintaining strict boundary controls between environments.
</info added on 2025-07-12T20:32:45.143Z>

