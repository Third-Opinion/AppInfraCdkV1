# Task ID: 16
# Title: Make VPC lookup dynamic by name pattern instead of hardcoded ID
# Status: done
# Dependencies: 13, 14
# Priority: medium
# Description: Replace hardcoded VPC ID (vpc-0a2035c919f0c0f0f) in TrialFinderV2EcsStack with dynamic VPC lookup by name pattern (e.g., 'prod-shared-vpc-ue2-main'), making the stack resilient to VPC recreation.
# Details:
1. Implement VPC Lookup by Name Pattern:
   - Remove hardcoded VpcId="vpc-0a2035c919f0c0f0f" from TrialFinderV2EcsStack.cs
   - Use Vpc.FromLookup() method with VpcLookupOptions to search by tag:Name pattern
   - Implement environment-aware VPC name patterns: 
     * Development: 'dev-shared-vpc-ue2-main'
     * Production: 'prod-shared-vpc-ue2-main'
     * Staging: 'staging-shared-vpc-ue2-main'
   - Add VPC name pattern to environment configuration files as 'vpcNamePattern' field

2. Update TrialFinderV2EcsStack Implementation:
   - Modify stack constructor to accept VPC name pattern from configuration
   - Replace hardcoded VPC lookup with: 
     ```csharp
     var vpc = Vpc.FromLookup(this, "SharedVpc", new VpcLookupOptions
     {
         Tags = new Dictionary<string, string> { { "Name", vpcNamePattern } }
     });
     ```
   - Add fallback logic to handle VPC not found scenarios with descriptive error messages
   - Ensure VPC lookup is performed before any dependent resources are created

3. Configuration Management:
   - Add 'vpcNamePattern' field to all environment JSON files (development.json, production.json, staging.json, integration.json)
   - Document the expected VPC naming convention in configuration comments
   - Update deployment documentation to reflect dynamic VPC lookup behavior
   - Consider adding optional 'vpcId' field for backward compatibility or override scenarios

4. CDK Context Handling:
   - Clear CDK context cache that may contain cached VPC lookups: cdk context --clear
   - Update deployment scripts to handle context refresh when VPC changes
   - Add validation to ensure VPC lookup returns exactly one VPC
   - Implement proper error handling for multiple VPCs matching the pattern

# Test Strategy:
1. Test VPC Lookup Functionality:
   - Deploy to development environment and verify correct VPC is selected using 'dev-shared-vpc-ue2-main' pattern
   - Run cdk synth to confirm VPC lookup resolves correctly without hardcoded IDs
   - Validate synthesized CloudFormation template contains correct VPC references
   - Test with invalid VPC name pattern and verify appropriate error handling

2. Environment-Specific Testing:
   - Test deployment with each environment configuration (dev, staging, prod)
   - Verify correct VPC is selected based on environment-specific name patterns
   - Confirm existing resources continue to function with dynamic VPC lookup
   - Test stack updates to ensure VPC reference remains stable

3. Resilience Testing:
   - Clear CDK context and redeploy to verify VPC lookup works without cache
   - Test deployment when multiple VPCs exist with similar names
   - Verify stack behavior when VPC with matching name doesn't exist
   - Test rollback scenarios to ensure VPC changes don't break existing deployments

4. Integration Testing:
   - Deploy full TrialFinderV2 application stack with dynamic VPC lookup
   - Verify ALB and ECS resources are created in correct VPC
   - Test network connectivity between resources in dynamically looked up VPC
   - Validate security group rules and network ACLs function correctly
